<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="52feb78c-cc32-4028-b44f-52537726795e" activeEnvironment="Default" name="NetworkConf-REST" resourceRoot="${projectDir}" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
	<con:settings/>
	<con:interface xsi:type="con:RestService" id="bd93cc35-2803-4284-91ab-5afbb12197dc" wadlVersion="http://wadl.dev.java.net/2009/02" name="Authenticate" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>
		
		<con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
			<con:endpoint>http://172.31.62.200</con:endpoint>
		</con:endpoints>
		<con:resource name="Authenticate" path="/auth/realms/{realm}/protocol/openid-connect/token" id="0e126043-f8a7-4994-84e4-83b5736b08eb">
			<con:settings/>
			<con:parameters><con:parameter><con:name>realm</con:name><con:value>smi-microservices</con:value><con:style>TEMPLATE</con:style><con:default>smi-microservices</con:default></con:parameter><con:parameter required="true"><con:name>grant_type</con:name><con:value>password</con:value><con:style>QUERY</con:style><con:default>password</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>username</con:name><con:value>user1</con:value><con:style>QUERY</con:style><con:default>user1</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>password</con:name><con:value>1234</con:value><con:style>QUERY</con:style><con:default>1234</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>client_id</con:name><con:value>service-virtualnetwork</con:value><con:style>QUERY</con:style><con:default>service-virtualnetwork</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>client_secret</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters>
			<con:method name="Authenticate" id="e2e300a6-bad7-4cb8-9e82-36e65861a738" method="POST">
				<con:settings/>
				<con:parameters/>
				<con:representation type="REQUEST">
					<con:mediaType>application/json</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 401</con:status><con:params/><con:element xmlns:aut="https://172.31.62.176/v1.0/appliance/session/authenticate">aut:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/mixed</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>text/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:aut="https://172.31.62.176/v1.0/appliance/session/authenticate">aut:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GoodCredentials" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
					<con:request/>
					<con:originalUri>https://172.31.62.176/v1.0/appliance/session/authenticate</con:originalUri><con:credentials>
						<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
				<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>realm</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:request>
			</con:method>
		</con:resource>
	</con:interface>
	<con:interface xsi:type="con:RestService" id="404cfe22-654e-4271-8818-43a3fc2c34f0" wadlVersion="http://wadl.dev.java.net/2009/02" name="Networkconfigurations" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>
		
		<con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
			<con:endpoint>https://172.31.62.200</con:endpoint>
		</con:endpoints>
		<con:resource name="GetNetwork" path="/api/1.0/networks/{networkId}/" id="356e7e2f-32f6-4d66-bfc5-eb7d98158714">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>networkId</con:name>
					<con:value>networkId</con:value>
					<con:style>TEMPLATE</con:style>
					<con:default>networkId</con:default>
					<con:path xsi:nil="true"/>
					<con:description xsi:nil="true"/>
				</con:parameter>
			</con:parameters>
			<con:method name="NetworkId" id="09a87e45-c549-4a8b-8abe-2d4e861c5470" method="GET">
				<con:settings/>
				<con:parameters/>
				<con:representation type="FAULT">
					<con:mediaType>application/json</con:mediaType>
					<con:status>404 401 400</con:status>
					<con:params/>
					<con:element xmlns:ns="https://172.31.59.156/v1.0/api/networks/10/">ns:Fault</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType>application/json</con:mediaType>
					<con:status>200</con:status>
					<con:params/>
					<con:element xmlns:ns="https://172.31.59.156/v1.0/api/networks/10/">ns:Response</con:element>
				</con:representation>
				<con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404 500 400 401</con:status><con:params/><con:element xmlns:ns="https://172.31.59.156/v1.0/api/networks/10/">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="https://172.31.59.156/v1.0/api/networks/10/">ns:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:encoding/><con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request/>
					<con:originalUri>http://100.64.23.53/api/1.0/networks/1/</con:originalUri><con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<entry key="networkId" value="${#Project#NetworkId}" xmlns="http://eviware.com/soapui/config"/>
					</con:parameters>
					<con:parameterOrder>
						<con:entry>networkId</con:entry>
					</con:parameterOrder>
				</con:request>
			</con:method>
		</con:resource>
		<con:resource name="CreateNetwork" path="/api/1.0/networks" id="f7eecfb8-57f2-44a0-8fc6-5e35b79505b9">
			<con:settings/>
			<con:parameters><con:parameter><con:name>networkName</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkDescription</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkType</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>vLanId</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>staticIPv4Network</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkGateway</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkSubnet</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkDnsSuffix</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkPrimaryIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkSecondaryIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkStartingIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkEndingIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters>
			<con:method name="Method 1" id="fb405e56-c082-429e-9113-f442991061cb" method="POST">
				<con:settings/>
				<con:parameters/>
				<con:representation type="REQUEST">
					<con:mediaType>application/json</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType>application/json</con:mediaType>
					<con:status>500 401 400 404</con:status>
					<con:params/>
					<con:element xmlns:net="https://172.31.62.172/v1.0/api/networks">net:Fault</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType>application/json</con:mediaType>
					<con:status>201 200</con:status>
					<con:params/>
				</con:representation>
				<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500 400 401 403 405</con:status><con:params/><con:element xmlns:net="https://172.31.62.172/v1.0/api/networks">net:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xmlns:net="https://172.31.62.172/v1.0/api/networks">net:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
					<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request/>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
  <con:entry key="networkType" value="https://${#Project#networkType}"/>
  <con:entry key="networkDescription" value="https://${#Project#networkDescription}"/>
  <con:entry key="networkDnsSuffix" value="https://${#Project#networkDnsSuffix}"/>
  <con:entry key="networkId" value="https://${#Project#networkId}"/>
  <con:entry key="networkEndingIp" value="https://${#Project#networkEndingIp}"/>
  <con:entry key="vLanId" value="https://${#Project#VLanId}"/>
  <con:entry key="networkStartingIp" value="https://${#Project#networkStartingIp}"/>
  <con:entry key="staticIPv4Network" value="https://${#Project#staticIPv4Network}"/>
  <con:entry key="networkSecondaryIp" value="https://${#Project#networkSecondaryIp}"/>
  <con:entry key="networkPrimaryIp" value="https://${#Project#networkPrimaryIp}"/>
  <con:entry key="networkSubnet" value="https://${#Project#networkSubnet}"/>
  <con:entry key="networkName" value="https://${#Project#networkName}"/>
  <con:entry key="networkGateway" value="https://${#Project#networkGateway}"/>
</con:parameters>
				<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:request>
			<con:request name="Copy of Request 1" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
					<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request>{
						"name":"Network1",
						"description":"The First Network",
						"type":" PUBLIC_LAN"
						"vlanId":90,
						"static":true,
						"staticIpv4NetworkConfiguration":
						{
						"gateway":"0.0.0.0",
						"subnet":"255.255.255.0",
						"dnsSuffix":"abc.com",
						"primaryDNS":"172.162.0.1",
						"secondaryDNS":"172.162.0.2",
						"ipRange":
						[
						{
						"startingIp":"172.162.0.90",
						"endingIp":"172.162.0.92"
						}

						]
						}
						}
					</con:request>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
  <con:entry key="networkDescription" value="https://${#Project#networkDescription}"/>
  <con:entry key="networkType" value="https://${#Project#networkType}"/>
  <con:entry key="staticIPv4Network" value="https://${#Project#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="https://${#Project#networkDnsSuffix}"/>
  <con:entry key="networkId" value="https://${#Project#networkId}"/>
  <con:entry key="networkSecondaryIp" value="https://${#Project#networkSecondaryIp}"/>
  <con:entry key="networkName" value="https://${#Project#networkName}"/>
  <con:entry key="networkSubnet" value="https://${#Project#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="https://${#Project#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="https://${#Project#VLanId}"/>
  <con:entry key="networkGateway" value="https://${#Project#networkGateway}"/>
</con:parameters>
				<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:request></con:method>
		</con:resource>
		<con:resource name="UpdateNetwork" path="/api/1.0/networks/{networkId}" id="deb4d476-7432-4587-85b5-5ff9eba5ba6a">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>networkId</con:name>
					<con:value>networkId</con:value>
					<con:style>TEMPLATE</con:style>
					<con:default>networkId</con:default>
				</con:parameter>
			<con:parameter><con:name>networkName</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkDescription</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkType</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>vLanId</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>staticIPV4Network</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkGateway</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkSubnet</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkDnsSuffix</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkPrimaryIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkSecondaryIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters>
			<con:method name="Method 1" id="efc42bca-6e0a-4feb-85ff-91740aa5aa6f" method="PUT">
				<con:settings/>
				<con:parameters/>
				<con:representation type="REQUEST">
					<con:mediaType>application/json</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType>text/html; charset=iso-8859-1</con:mediaType>
					<con:status>404</con:status>
					<con:params/>
					<con:element>html</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType>application/json</con:mediaType>
					<con:status>500 401 400</con:status>
					<con:params/>
					<con:element xmlns:htt="https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2">htt:Fault</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500 404</con:status><con:params/><con:element xmlns:htt="https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2">htt:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="7f3809ad-618a-4308-b62e-6bce71e3f162" mediaType="application/json" postQueryString="false">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request>
					</con:request>
					<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2
					</con:originalUri>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
  <con:entry key="networkType" value="https://${#Project#networkType}"/>
  <con:entry key="networkDescription" value="https://${#Project#networkDescription}"/>
  <con:entry key="networkDnsSuffix" value="https://${#Project#networkDnsSuffix}"/>
  <con:entry key="networkId" value="https://${#Project#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="https://${#Project#networkSecondaryIp}"/>
  <con:entry key="networkPrimaryIp" value="https://${#Project#networkPrimaryIp}"/>
  <con:entry key="networkSubnet" value="https://${#Project#networkSubnet}"/>
  <con:entry key="networkName" value="https://${#Project#networkName}"/>
  <con:entry key="staticIPV4Network" value="https://${#Project#staticIPv4Network}"/>
  <con:entry key="networkGateway" value="https://${#Project#networkGateway}"/>
  <con:entry key="vLanId" value="https://${#Project#networkVLanId}"/>
</con:parameters>
				<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPV4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry></con:parameterOrder></con:request>
			<con:request name="Copy of Request 1" id="7f3809ad-618a-4308-b62e-6bce71e3f162" mediaType="application/json" postQueryString="false">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request>{
						"id":1,
						 "name":"Network1",
						 "description":"The First Network",
						 "type":"PUBLIC_LAN",
						 "vlanId":90,
						 "static":true,
						  "staticIpv4NetworkConfiguration":  
						    {
						        "gateway":"0.0.0.0",
						        "subnet":"255.255.255.0",
						        "dnsSuffix":"abc.com",
						        "primaryDNS":"172.162.0.1",
						        "secondaryDNS":"172.162.0.2",
						    }
						}
					</con:request>
					<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2
					</con:originalUri>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters><entry key="networkId" value="https://${#Project#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
				<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPV4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry></con:parameterOrder></con:request></con:method>
		</con:resource>
		<con:resource name="DeleteNetwork" path="/api/1.0/networks/{networkId}" id="4b0372ad-1c49-4129-8bf0-849f233a14ee">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>networkId</con:name>
					<con:value>networkId</con:value>
					<con:style>TEMPLATE</con:style>
					<con:default>networkId</con:default>
				</con:parameter>
			</con:parameters>
			<con:method name="Delete Method" id="0c5d534f-6800-48b3-85ac-1fddc77aaf6c" method="DELETE">
				<con:settings/>
				<con:parameters/>
				<con:representation type="REQUEST">
					<con:mediaType>application/json</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType>application/json</con:mediaType>
					<con:status>404 400 401 500</con:status>
					<con:params/>
					<con:element xmlns:ns="https://172.31.62.172/">ns:Fault</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500 404</con:status><con:params/><con:element xmlns:htt="https://172.31.62.172/https%3A%2F%2F2">htt:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request/>
					<con:originalUri>https://172.31.62.172/</con:originalUri>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<entry key="networkId" value="https://${#Project#NetworkId}" xmlns="http://eviware.com/soapui/config"/>
					</con:parameters>
				</con:request>
			</con:method>
		</con:resource>
		<con:resource name="GetAllNetworks" path="/api/1.0/networks" id="03552a51-2b50-4bf4-8cec-77e89809ddbb">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>offset</con:name>
					<con:value>{offset}</con:value>
					<con:style>QUERY</con:style>
					<con:default>{offset}</con:default>
				</con:parameter>
				<con:parameter>
					<con:name>limit</con:name>
					<con:value>{limit}</con:value>
					<con:style>QUERY</con:style>
					<con:default>{limit}</con:default>
				</con:parameter>
			</con:parameters>
			<con:method name="GetAllNetworks Method" id="00f15f88-0466-46fe-b650-3600788694a4" method="GET">
				<con:settings/>
				<con:parameters/>
				<con:representation type="FAULT">
					<con:mediaType>application/json</con:mediaType>
					<con:status>400 401 404</con:status>
					<con:params/>
					<con:element xmlns:net="https://172.31.62.172/v1.0/api/networks">net:Fault</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType>application/json</con:mediaType>
					<con:status>200</con:status>
					<con:params/>
					<con:element xmlns:net="https://172.31.62.172/v1.0/api/networks">net:Response</con:element>
				</con:representation>
				<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404 405 500 400</con:status><con:params/><con:element xmlns:net="https://localhost/v1.0/api/networks">net:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:net="https://172.31.62.172/v1.0/api/networks">net:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="2ccba7c5-ba8f-4841-b0c1-f4a2497847f1" mediaType="application/json">
					<con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings>
					<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request/>
					<con:originalUri>https://localhost/v1.0/api/networks</con:originalUri><con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters/>
				</con:request>
			</con:method>
		</con:resource>
		<con:resource name="AddIPV4Range" path="/api/1.0/networks/{networkId}/ipv4Ranges/" id="d68cbe9c-4877-463a-84ee-9bbf36b09ca3">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>networkId</con:name>
					<con:value>networkId</con:value>
					<con:style>TEMPLATE</con:style>
					<con:default>networkId</con:default>
				</con:parameter>
			<con:parameter><con:name>networkAddStartingIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkAddEndingIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters>
			<con:method name="Method 1" id="f1ff445b-4536-4371-b7d9-02641c915f5f" method="POST">
				<con:settings/>
				<con:parameters/>
				<con:representation type="REQUEST">
					<con:mediaType>application/json</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType>application/json</con:mediaType>
					<con:status>201</con:status>
					<con:params/>
				</con:representation>
				<con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 500 400</con:status><con:params/><con:element xmlns:ipv="https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/">ipv:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>405 404</con:status><con:params/><con:element xmlns:ipv="https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/">ipv:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:ipv="https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/">ipv:Response</con:element></con:representation><con:request name="Request 1" id="f8f2c315-2eb3-4293-a8a6-30dd1ddbf079" mediaType="application/json" postQueryString="false">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request>
					</con:request>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
  <con:entry key="networkAddStartingIp" value="https://${#Project#networkAddStartingIP}"/>
  <con:entry key="networkAddEndingIp" value="https://${#Project#networkAddEndingIp}"/>
  <con:entry key="networkId" value="https://${#Project#NetworkId}"/>
</con:parameters>
				<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkAddStartingIp</con:entry><con:entry>networkAddEndingIp</con:entry></con:parameterOrder></con:request>
			</con:method>
		</con:resource>
		<con:resource name="UpdateIPV4Range" path="/api/1.0/networks/{networkId}/ipv4Ranges/{rangeId}" id="bb4355ea-a307-4c7a-b516-27e01f26e0f0">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>networkId</con:name>
					<con:value>networkId</con:value>
					<con:style>TEMPLATE</con:style>
					<con:default>networkId</con:default>
				</con:parameter>
				<con:parameter>
					<con:name>rangeId</con:name>
					<con:value>rangeId</con:value>
					<con:style>TEMPLATE</con:style>
					<con:default>rangeId</con:default>
				</con:parameter>
			<con:parameter><con:name>networkStartingIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>networkEndingIp</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters>
			<con:method name="Method 1" id="f533195f-966c-4dc8-a62c-a02986a05532" method="PUT">
				<con:settings/>
				<con:parameters/>
				<con:representation type="FAULT">
					<con:mediaType>text/html; charset=iso-8859-1</con:mediaType>
					<con:status>404</con:status>
					<con:params/>
					<con:element>html</con:element>
				</con:representation>
				<con:representation type="REQUEST">
					<con:mediaType>application/json</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType>application/json</con:mediaType>
					<con:status>500 401 404 400</con:status>
					<con:params/>
					<con:element xmlns:htt="https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2">htt:Fault</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType xsi:nil="true"/>
					<con:status>404</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="83fe57c0-1bad-45be-ae91-430707ec4473" mediaType="application/json" postQueryString="false">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request>
					</con:request>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
  <con:entry key="rangeId" value="https://${#Project#RangeId}"/>
  <con:entry key="networkStartingIp" value="https://${#Project#networkStartingIp}"/>
  <con:entry key="networkId" value="https://${#Project#NetworkId}"/>
  <con:entry key="networkEndingIp" value="https://${#Project#networkEndingIp}"/>
</con:parameters>
				<con:parameterOrder><con:entry>networkId</con:entry><con:entry>rangeId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:request>
			</con:method>
		</con:resource>
		<con:resource name="DeleteIPV4Range" path="/api/1.0/networks/{networkId}/ipv4Ranges/{rangeId}" id="cab5e39d-fd83-4120-9baf-03bad2142bdb">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>networkId</con:name>
					<con:value>networkId</con:value>
					<con:style>TEMPLATE</con:style>
					<con:default>networkId</con:default>
				</con:parameter>
				<con:parameter>
					<con:name>rangeId</con:name>
					<con:value>rangeId</con:value>
					<con:style>TEMPLATE</con:style>
					<con:default>rangeId</con:default>
				</con:parameter>
			</con:parameters>
			<con:method name="DeleteIPV4Range Method" id="fa361a92-3659-4916-89aa-81a2ece6c6c4" method="DELETE">
				<con:settings/>
				<con:parameters/>
				<con:representation type="FAULT">
					<con:mediaType>text/html; charset=iso-8859-1</con:mediaType>
					<con:status>404</con:status>
					<con:params/>
					<con:element>html</con:element>
				</con:representation>
				<con:representation type="REQUEST">
					<con:mediaType>application/json</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>204</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 404 400</con:status><con:params/><con:element xmlns:htt="https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2">htt:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:htt="https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2">htt:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="2cf10098-e94f-4e31-b267-fbef026bd151" mediaType="application/json" postQueryString="false">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
					<con:request/>
					<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2
					</con:originalUri>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<con:entry key="rangeId" value="https://${#Project#RangeId}"/>
						<con:entry key="networkId" value="https://${#Project#NetworkId}"/>
					</con:parameters>
				</con:request>
			</con:method>
		</con:resource>
	</con:interface>
	<con:testSuite id="8b2bc269-5c64-42fc-b04b-e606982f952e" name="NetworkConfServices">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		
		<con:testCase id="c6d4c58d-f34c-444b-b2cf-204750538cb2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validCreateNetwork" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clear cookies" id="2364a452-093a-49d6-8152-9f1f0ef7517a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport

def myCookieStore = HttpClientSupport.getHttpClient().getCookieStore()

def myCookies = myCookieStore.getCookies()

// find the session cookie
def sessionCookie
myCookies.each {
    // print all of them 
    log.info(it.name + " = " + it.value)
    if (it.name == "JSESSIONID"){
        sessionCookie = it
    }

}


// if you want to update the cookie value
// sessionCookie.value = "new cookie value here..."


// deleting all cookies
myCookieStore.clear()

// to delete only specific
//if (sessionCookie != null) {
//  sessionCookie.expiryDate = new Date()-1 // yesterday
//  myCookieStore.clearExpired(new Date()-1)
//}

// check if the cookies are really removed
myCookies = myCookieStore.getCookies()
log.info("After Removing Session Cookie");
myCookies.each {
    // print all of them 
    log.info(it.name + " = " + it.value)
}

// if you want to create your own cookie
//import org.apache.http.impl.Cookie.BasicClientCookie
//def myNewCookie = new BasicClientCookie("cookie_name", "cookie_value")
//myNewCookie.version = 1
//myNewCookie.domain = "qa.test"
//myCookieStore.addCookie(myNewCookie)

// or from another cookie
//def myNewCookie = new BasicClientCookie("cookie_name", interestingCookie.value)
</script></con:config></con:testStep><con:testStep type="restrequest" name="authenticate" id="5e748542-15a4-4c8c-8122-ab1f82278181" disabled="true">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="c8d53b66-a8e6-4094-9c6b-f570c2ffbd10" disabled="true">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="d11356f3-bd4a-47c1-999c-d20efd73c398"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="888b4a89-4d9d-40d1-b4d3-a34bf29d40b3">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:encoding/><con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="34f56de0-11b0-433b-9bee-c96bc0590da9"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="43d5e081-1253-4c39-a548-0afca30cb2db">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration><codes>204</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="returnToReadCreateNetworkData" id="54917bc1-84af-4cb6-9a32-0a263fe48625"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readCreateNetworkData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="a54c4075-d90c-46f9-8a20-1450dc170ea8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>c9f0a9f4-e840-4745-a53e-43c9114120e9</con:value></con:property><con:property><con:name>networkId</con:name><con:value>1030</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network4</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>STORAGE_FCOE_SAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>false</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>1.0.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.252.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>3999</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>1.0.0.1</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>1.0.3.232</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": false</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJjMzVmMDMzMC04M2U2LTRiMTEtOTE2YS1jYzQwMTg5YjJiMDYiLCJleHAiOjE0NzUxNjAwMzUsIm5iZiI6MCwiaWF0IjoxNDc1MTU5OTc1LCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6Ijk5YWE1NzliLTQ4MjMtNDhkZi1hOWI4LTY5Y2JjMzYwMWJhMyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6ImMxZDhiNTI5LTM3YTktNDM4ZS1iZGQ0LWNiOGM4MDQzOTMzOSIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.Sd1zqCdfLBRIr9T53NwPUQbff4grFe-0SVIgbvXp7tQZRAAdt75t9Bf-ktW_zM9T6NjmUUpRrBuS9dEyIVyyDof2smQKmtKAcV3E_2mBZU1WvqsSTv9GGFENiuHoD_6hec6g2Kml8OSiT6rZJMbRmCqthELOYrCv4wE5QCWXPOJFXGGOb0Msd6CjbVqOSZ_6PjneUANVgVbiTa6wgKYuOjug8U6iz8isjZsIgDwkk3rcFZRSZJGnEvnO2E6eWNyCTqs3xTS-2Fq9f-bLlz5-S1KgkrS0Zky6uEeLLVhsR_E5auIjuRHfwS8pHMdqnICHgQWZCo5bxqfMI4bsH7Q53g</con:value></con:property></con:properties></con:testCase><con:testCase id="e66807c1-ae4f-414e-9560-438261c80591" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validDeleteNetwork" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="6cd6d4f4-e058-4908-b09f-e269c46d07ed" disabled="true">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="f992f507-beaf-4716-aafe-393569d289f6" disabled="true">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="ffbb7832-b9ac-4bcc-9f0a-c47662cc1f88"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="929d9471-efc6-4b33-ae53-82a550ebf739">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:encoding/><con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="086500a8-d732-41d2-877e-a60ad461fa4c"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="300e83b4-92a0-45b0-9fe5-b6f08f670944">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="getNetwork" id="4dd981a7-51ba-4d9d-91bc-5e75131ea6f2">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>404
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>590de938-b33d-4a38-8f54-301bc834afc5</con:value></con:property><con:property><con:name>networkId</con:name><con:value>1031</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJjN2UxOWYyMS0yMjY3LTRiMDQtOTRiZC0wOWVlZmFiY2YzNTkiLCJleHAiOjE0NzUxNjAwNDEsIm5iZiI6MCwiaWF0IjoxNDc1MTU5OTgxLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjY5Y2RiY2Q0LTEzNzYtNDgzZi1iYjIyLWM2Mzc0NjBmMmVkNSIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjE1ZWIxYWQyLTMyNzAtNGNiMC05NTM4LTZkMDBlYjU2MTkxZCIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.Ifr1taGF6GUtG52VMWsb11e7IYJVSbWWz5xzDp0SOYTuFT0cLEc09h8NTxkWUYkbksWYF0TUEBTMK24udFiF2nievh1OgjZW6SwZZV9Vqsa4YER1DUhUuNCpZ4LOweAN1VdAeFLM9uyDhhWGVYcfBqLSkBPHXrFftxTRDU4DaZvNa1k2bM5KDz6md4g8zqHwD2pCwfLIZr0nOfl5QjXy4yMhWXMHy_rmXFMuwulisuKyrjVMym_iI-zOz9C7ik9FhdjzRlWVctSy4dFdyl43ePhQXc8Y1d8_OjlhXIKGo08iL5e9zWU5hn3fJBcoBcOeTPnZd5cI0VRH4HsQZSbkGg</con:value></con:property></con:properties></con:testCase><con:testCase id="eaeaeafd-8547-4119-a78e-56f42a98814a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validUpdateNetwork" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="e3406e29-6671-47d9-826c-90113804cbea" disabled="true">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="9cbf667a-d09c-4cf6-92aa-a4428057e290" disabled="true">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="98507d96-ab19-43ad-8fbd-7a5349d6cc38"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: validCreateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="ba648cc7-2f5a-4a9a-b59b-a46ff4b5b27b">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="e34e0ef4-7d67-4010-bc27-f9377a2c084f"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getNetwork" id="3f6802b0-bc9d-438a-a84a-66650478a482">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetIPv4RangeId" id="546ad489-8ef3-4406-9b35-c9462ee687f7"><con:settings/><con:config><script>//
// This script will harvest the first IPv4 Range ID obtained by calling the
// getNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getNetwork").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)

log.info(slurpResponse.staticIpv4NetworkConfiguration.ipRange[0].id)
testRunner.testCase.setPropertyValue("RangeId", slurpResponse.staticIpv4NetworkConfiguration.ipRange[0].id.toString())
</script></con:config></con:testStep><con:testStep type="groovy" name="readUpdateNetworkData" id="9664c0d8-9c88-490f-ab04-685c16dce0ea"><con:settings/><con:config><script>//
// This script will alter the network identified by networkId using information
// from the file below.
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validUpdateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
         	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"' + propData[5] + '",\n'     
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
          staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'          
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
          staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
         	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//

  //        assert(!(propData.size() % 2) &amp;&amp; (propData.size() = 10))

          if(propData.size() == 9)
          {
               testRunner.testCase.setPropertyValue("networkSecondaryDns", "")
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": \n'
          }
          else
          {
               testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          }    
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readingValidUpdateNetworkData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="updateNetwork" id="39f866de-d437-4354-a736-674e4a64637b">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateNetwork" id="7f3809ad-618a-4308-b62e-6bce71e3f162" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "id": ${#TestCase#networkId},
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="83c303bb-b7c6-4849-a3ae-de1df5691bce" name="Valid HTTP Status Codes">
							<con:configuration><codes>204</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="networkDescription" value="${#TestCase#networkDescription}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="staticIPV4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkGateway" value="${#TestCase#networGateway}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPV4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="getNetwork2" id="1e1e947e-433e-4c0f-bdd6-6b36b2e3058a">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork2" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyNetworkInfo" id="4c1379e3-9b12-40c9-b1b8-fdbfedb113bf"><con:settings/><con:config><script>//
// This script will verify that the Get Network API returns the newly added IPv4 
// range information as was added by the Add IPv4 Range was called.
//
// Note that this script expects there are only two IP range values.
//
import groovy.json.JsonSlurper

def responseMessage = testRunner.testCase.getTestStepByName("getNetwork2").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(responseMessage)

assert jsonSlurper.name == testRunner.testCase.getPropertyValue("networkName")
assert jsonSlurper.description == testRunner.testCase.getPropertyValue("networkDescription")
assert jsonSlurper.type == testRunner.testCase.getPropertyValue("networkType")
assert jsonSlurper.vlanId.toString() == testRunner.testCase.getPropertyValue("VLanId").toString()
assert jsonSlurper.static.toString() == testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//
// Can we verify dynamic network info?
//
if("true" == jsonSlurper.static.toString())
{
     assert jsonSlurper.staticIpv4NetworkConfiguration.gateway == testRunner.testCase.getPropertyValue("networkGateway")
     assert jsonSlurper.staticIpv4NetworkConfiguration.subnet == testRunner.testCase.getPropertyValue("networkSubnet")
     assert jsonSlurper.staticIpv4NetworkConfiguration.dnsSuffix == testRunner.testCase.getPropertyValue("networkDnsSuffix")
     assert jsonSlurper.staticIpv4NetworkConfiguration.primaryDns == testRunner.testCase.getPropertyValue("networkPrimaryDns")
     assert jsonSlurper.staticIpv4NetworkConfiguration.secondaryDns == testRunner.testCase.getPropertyValue("networkSecondaryDns")
//
// Get index of original rangeId index, and verify original IP range.
//
     rangeId = testRunner.testCase.getPropertyValue("RangeId")
     index = jsonSlurper.staticIpv4NetworkConfiguration.ipRange.id.findIndexOf{it==~ /$rangeId/}
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].startingIp == testRunner.testCase.getPropertyValue("networkStartingIp")
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].endingIp == testRunner.testCase.getPropertyValue("networkEndingIp")
}
</script></con:config></con:testStep><con:testStep type="goto" name="loopToReadUpdateNetworkData" id="8030f20c-d628-4d84-9e3e-c2a75dabcbf3"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>whilte true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readUpdateNetworkData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="e488611f-4c2b-41ba-a34c-507ef7cd980c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="4338811f-ab60-4c3e-bfbf-8b6c2e18eaf7">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>67deb793-1f11-4d97-8d44-9ff003065b22</con:value></con:property><con:property><con:name>networkId</con:name><con:value>1036</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network2</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>HYPERVISOR_MANAGEMENT</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>100.100.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>192.0.0.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>4000</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "100.100.0.1",
          "subnet": "192.0.0.0",
          "dnsSuffix": "test.com",
          "primaryDns": "100.162.0.1",
          "secondaryDns": "100.200.0.4"
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>100.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>100.200.0.4</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>1037</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiI3Yzk2ODk0Yy1kOTU5LTRlNjMtYjgwNi1lMDYzYjRkOGYyMWYiLCJleHAiOjE0NzUxNjAwNDIsIm5iZiI6MCwiaWF0IjoxNDc1MTU5OTgyLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImFiMjhmMTY1LThmNzAtNDBkMS04YWMyLWYwNjFmYjg5YTZjOSIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6ImUyMDgwNjY3LWYwZDItNGVjOC04Njk3LWMxYjFhMGExNTU4ZCIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.SaAgt9SfWKD57ub-vvenZsrERdSFpYYKnvDJbEyE2KEfhw10tanVmtiQJu0tCqaG2IuUr9fVcW1v7kX2gidlNd25z0dm3X1Gny-OcSUaXNCOw00R-FGoBNX6GXksPgWUScj7_oK4J54KLdljC9Ndm5TqYTfgcPNjH9CSjuvcvfka0QRCCMpjxCa1c2qsGESZWfmE9bXBRJLEPh4D6W9rAXAFs_iPXJs2lsEVse07S3XuMdQVWUa5AxPkGVij1XF8yBO52qrVeQUkNIQVygEBSERKVGskD2I8yxWJz1BM7B9xFf79wV8-NncdmX4AxWOj5QDFyDrar6-Vc54Pe6Jm2Q</con:value></con:property></con:properties></con:testCase><con:testCase id="681973cc-c211-4116-842a-320860ee262e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validGetNetwork" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="a2a9a456-3d85-4a5b-8840-08ba63e52482" disabled="true">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="a38e4cca-8d5b-45fa-b9be-b2ec7a25ae9f" disabled="true">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="88e82373-beae-4edf-8149-4ad5d7075239"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="c361006e-eade-4626-af46-9eb8e50e26b2">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="6f1540c9-dbc0-4d02-b89f-0014b1f2cf26"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getNetwork" id="72815f5f-e920-4f11-80f2-d4bb8c810d42">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200

</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetIPv4RangeId" id="bb03c3b6-5e7d-4faf-947d-25b116874dc8"><con:settings/><con:config><script>//
// This script will harvest the first IPv4 Range ID obtained by calling the
// getNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getNetwork").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)

log.info(slurpResponse.staticIpv4NetworkConfiguration.ipRange[0].id)
testRunner.testCase.setPropertyValue("RangeId", slurpResponse.staticIpv4NetworkConfiguration.ipRange[0].id.toString())
</script></con:config></con:testStep><con:testStep type="groovy" name="verifyNetworkInfo" id="454db2a0-48ba-4efc-a8d4-f097e025d001"><con:settings/><con:config><script>//
// This script will verify that the Get Network API returns the newly added IPv4 
// range information as was added by the Add IPv4 Range was called.
//
// Note that this script expects there are only two IP range values.
//
import groovy.json.JsonSlurper

def responseMessage = testRunner.testCase.getTestStepByName("getNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(responseMessage)

assert jsonSlurper.name == testRunner.testCase.getPropertyValue("networkName")
assert jsonSlurper.description == testRunner.testCase.getPropertyValue("networkDescription")
assert jsonSlurper.type == testRunner.testCase.getPropertyValue("networkType")
assert jsonSlurper.vlanId.toString() == testRunner.testCase.getPropertyValue("VLanId").toString()
assert jsonSlurper.static.toString() == testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//
// Can we verify dynamic network info?
//
if("true" == jsonSlurper.static.toString())
{
     assert jsonSlurper.staticIpv4NetworkConfiguration.gateway == testRunner.testCase.getPropertyValue("networkGateway")
     assert jsonSlurper.staticIpv4NetworkConfiguration.subnet == testRunner.testCase.getPropertyValue("networkSubnet")
     assert jsonSlurper.staticIpv4NetworkConfiguration.dnsSuffix == testRunner.testCase.getPropertyValue("networkDnsSuffix")
     assert jsonSlurper.staticIpv4NetworkConfiguration.primaryDns == testRunner.testCase.getPropertyValue("networkPrimaryDns")
     assert jsonSlurper.staticIpv4NetworkConfiguration.secondaryDns == testRunner.testCase.getPropertyValue("networkSecondaryDns")
//
// Get index of original rangeId index, and verify original IP range.
//
     rangeId = testRunner.testCase.getPropertyValue("RangeId")
     index = jsonSlurper.staticIpv4NetworkConfiguration.ipRange.id.findIndexOf{it==~ /$rangeId/}
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].startingIp == testRunner.testCase.getPropertyValue("networkStartingIp")
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].endingIp == testRunner.testCase.getPropertyValue("networkEndingIp")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="35200f95-bec5-4d5d-9ec7-f66b477ebbab">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>b0884f89-3ac6-4af5-8ec8-ec56c42c6bf1</con:value></con:property><con:property><con:name>networkId</con:name><con:value>1041</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>1042</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJjNGE0ZTc5YS01NjBjLTQ2MzEtOWUwOC0yNGVhODBmMDg5NDgiLCJleHAiOjE0NzUxNjAwNDUsIm5iZiI6MCwiaWF0IjoxNDc1MTU5OTg1LCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjdjNzU1MjFhLWNhODItNDAxMS1hZjA5LWZiNzk3YjJiNDA1YyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjZkNGZlZDY1LWRiZTQtNDQzYy05MTMwLTBkNDRjZDQ0NmI4ZCIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.ROZD_HYL7haFLM_BAvhms4L-fg-tpIjLe5OF9YHe6rCDsjYnIQAtKe3Qho9EKvVcwlbYlIiE1Kv9ghfzaxg-AIWoSfretaTBw8dQXZgSo-Q6N-x6ttn3k2D6EcwE8KIDoczmmbG3QBaWCqyxeY_CRp86FARBPqfHyQCRLX9MEgJLEhtgUS1ptJryVSGWTGZELu3JA277BtDNXawaem0UzmTUp9Mx4fF9K1ymPifnTrCwXRzTtRwHrrcIx4m_UF2B57PjyaTNNswqTuWLQGnEJNfXoTZiXMkhyyRLLyn829-IZ5IN5b_PfUkhHWiuNYmS9QDwWrqfngmnLUV98iiDyw</con:value></con:property></con:properties></con:testCase><con:testCase id="a956dca4-170f-4ab7-938d-e3800d998651" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validGetAllNetworks" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="07fde75b-1755-4420-9a1e-0610725a56fc" disabled="true">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="f259d6f6-82d7-46bd-924f-04053781bfc3" disabled="true">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="3347083a-3b64-40be-a903-786d4cd5a55f"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("createLoopEnd")
}</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="dfd85faf-cd07-487f-a430-187229891912">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="0ea11caa-dbd9-4ed7-9161-75217b2b4be0"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getNetwork" id="f0ce10eb-ec7c-4946-8c69-aa6bda5a2e95">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200

</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToReadCreateNetworkData" id="a5ded507-30b4-4d76-9f47-12b5b0f76159"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readCreateNetworkData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="createLoopEnd" id="9c6fc3b5-aba7-4aad-98b4-84caf55c92e2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="b1fac8c4-9b2f-41b1-a169-ba41b865a717">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="parseGetAllNetworksInfo" id="b94a9ea4-235c-419a-b997-82cdd3d52842"><con:settings/><con:config><script>//
// This script will get the next networkId value as returned by the
// getAllNetworks test step.
//
import groovy.json.JsonSlurper

if(context.numNetworks == null)
{
     def responseMessage = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
     context.jsonSlurper = new JsonSlurper().parseText(responseMessage)
     log.info("raw network data: " + context.jsonSlurper.data)
     log.info("number of networks: " + context.jsonSlurper.data.size())

	log.info("setting up context variables")
     context.numNetworks = context.jsonSlurper.data.size()
     context.numRange = null
     context.networkIndex = 0
     context.rangeIndex = 0
}

if(context.networkIndex &lt; context.numNetworks)
{
     log.info("network data[" + context.networkIndex + "]: " + context.jsonSlurper.data[context.networkIndex])

     testRunner.testCase.setPropertyValue("networkId", context.jsonSlurper.data[context.networkIndex].id.toString())
     testRunner.testCase.setPropertyValue("networkName", context.jsonSlurper.data[context.networkIndex].name)
     testRunner.testCase.setPropertyValue("networkDescription", context.jsonSlurper.data[context.networkIndex].description)
     testRunner.testCase.setPropertyValue("networkType", context.jsonSlurper.data[context.networkIndex].type)
     testRunner.testCase.setPropertyValue("VLanId", context.jsonSlurper.data[context.networkIndex].vlanId.toString())
     testRunner.testCase.setPropertyValue("staticIPv4Network", context.jsonSlurper.data[context.networkIndex].static.toString())

     if("true" == testRunner.testCase.getPropertyValue("staticIPv4Network"))
     {
          testRunner.testCase.setPropertyValue("networkGateway", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.gateway)
          testRunner.testCase.setPropertyValue("networkSubnet", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.subnet)
          testRunner.testCase.setPropertyValue("networkDnsSuffix", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.dnsSuffix)
          testRunner.testCase.setPropertyValue("networkPrimaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.primaryDns)
          testRunner.testCase.setPropertyValue("networkSecondaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.secondaryDns)

          if(context.numRange == null)
          {
               context.numRange = context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange.id.size()
               log.info("context.numRange: " + context.numRange)
          }

          if(context.numRange > 0)
          {
               testRunner.testCase.setPropertyValue("RangeId", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].id.toString())
               log.info("rangeId: " + testRunner.testCase.getPropertyValue("RangeId"))
               testRunner.testCase.setPropertyValue("networkStartingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].startingIp)
               testRunner.testCase.setPropertyValue("networkEndingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].endingIp)     
//
// We want to return to this networkId to complete the parsing of the rangeId info
//
               if(++context.rangeIndex &lt; context.numRange)
                    --context.networkIndex

               log.info("Parse end for rangeIndex: " + context.rangeIndex)
               if(context.rangeIndex == context.numRange)
               {
                    context.numRange = null
                    context.rangeIndex = 0
               }
          }
     }
     log.info("Parse end for networkIndex: " + context.networkIndex)
     ++context.networkIndex
}
else
{
     context.numNetworks = null	
     testRunner.gotoStepByName("validGetAllNetworksEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="getNetwork2" id="a45f8791-477b-43cc-86ca-4272ede6c87e">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork2" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200

</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyNetworkInfo" id="0771bce7-de58-48ec-92e4-1396b6c1e21c"><con:settings/><con:config><script>//
// This script will verify that the Get Network API returns the newly added IPv4 
// range information as was added by the Add IPv4 Range was called.
//
// Note that this script expects there are only two IP range values.
//
import groovy.json.JsonSlurper

def responseMessage = testRunner.testCase.getTestStepByName("getNetwork2").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(responseMessage)

assert jsonSlurper.name == testRunner.testCase.getPropertyValue("networkName")
assert jsonSlurper.description == testRunner.testCase.getPropertyValue("networkDescription")
assert jsonSlurper.type == testRunner.testCase.getPropertyValue("networkType")
assert jsonSlurper.vlanId.toString() == testRunner.testCase.getPropertyValue("VLanId").toString()
assert jsonSlurper.static.toString() == testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//
// Can we verify dynamic network info?
//
if("true" == jsonSlurper.static.toString())
{
     assert jsonSlurper.staticIpv4NetworkConfiguration.gateway == testRunner.testCase.getPropertyValue("networkGateway")
     assert jsonSlurper.staticIpv4NetworkConfiguration.subnet == testRunner.testCase.getPropertyValue("networkSubnet")
     assert jsonSlurper.staticIpv4NetworkConfiguration.dnsSuffix == testRunner.testCase.getPropertyValue("networkDnsSuffix")
     assert jsonSlurper.staticIpv4NetworkConfiguration.primaryDns == testRunner.testCase.getPropertyValue("networkPrimaryDns")
     assert jsonSlurper.staticIpv4NetworkConfiguration.secondaryDns == testRunner.testCase.getPropertyValue("networkSecondaryDns")
//
// Get index of original rangeId index, and verify original IP range.
//
     rangeId = testRunner.testCase.getPropertyValue("RangeId")
     index = jsonSlurper.staticIpv4NetworkConfiguration.ipRange.id.findIndexOf{it==~ /$rangeId/}
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].startingIp == testRunner.testCase.getPropertyValue("networkStartingIp")
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].endingIp == testRunner.testCase.getPropertyValue("networkEndingIp")
}

if(jsonSlurper.vlanId == 4081)
     testRunner.gotoStepByName("parseGetAllNetworksInfo")

log.info("vlanId: " + jsonSlurper.vlanId.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="a6f5dbaa-59a5-4e2a-8e54-f8d3d8302e7c">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration><codes>204</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToParseGetAllNetworksInfo" id="f16282d8-54e9-4905-864a-e1b1ba11fb9e"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>parseGetAllNetworksInfo</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="validGetAllNetworksEnd" id="b1173ad3-71d7-445b-829b-9e80846172fb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>e93d10af-3c79-4133-9f9b-98c86404b08d</con:value></con:property><con:property><con:name>networkId</con:name><con:value>2075</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>{"data":[{"id":383,"name":"Network1","description":"QA Network","type":"PUBLIC_LAN","vlanId":2,"staticIpv4NetworkConfiguration":{"gateway":"72.162.0.1","subnet":"255.255.255.0","primaryDns":"72.162.0.1","secondaryDns":"72.162.0.2","dnsSuffix":"test.com","ipRange":[{"id":384,"startingIp":"72.162.0.90","endingIp":"72.162.0.92"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true},{"id":388,"name":"Network2","description":"QA Network","type":"PRIVATE_LAN","vlanId":4094,"staticIpv4NetworkConfiguration":{"gateway":"200.200.0.1","subnet":"255.0.0.0","primaryDns":"200.162.0.1","secondaryDns":"200.200.0.4","dnsSuffix":"test.com","ipRange":[{"id":389,"startingIp":"200.100.0.1","endingIp":"200.100.0.20"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true}],"pagination":{"offset":0,"limit":10,"total":2},"pages":{"current":1,"previous":-1,"next":-1,"total":1}}</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network4</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>STORAGE_FCOE_SAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>false</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>1.0.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.252.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>200.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>200.200.0.4</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>3999</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>1.0.0.1</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>1.0.3.232</con:value></con:property><con:property><con:name>pagination</con:name><con:value>{"data":[{"id":383,"name":"Network1","description":"QA Network","type":"PUBLIC_LAN","vlanId":2,"staticIpv4NetworkConfiguration":{"gateway":"72.162.0.1","subnet":"255.255.255.0","primaryDns":"72.162.0.1","secondaryDns":"72.162.0.2","dnsSuffix":"test.com","ipRange":[{"id":384,"startingIp":"72.162.0.90","endingIp":"72.162.0.92"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true},{"id":388,"name":"Network2","description":"QA Network","type":"PRIVATE_LAN","vlanId":4094,"staticIpv4NetworkConfiguration":{"gateway":"200.200.0.1","subnet":"255.0.0.0","primaryDns":"200.162.0.1","secondaryDns":"200.200.0.4","dnsSuffix":"test.com","ipRange":[{"id":389,"startingIp":"200.100.0.1","endingIp":"200.100.0.20"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true}],"pagination":{"offset":0,"limit":10,"total":2},"pages":{"current":1,"previous":-1,"next":-1,"total":1}}</con:value></con:property><con:property><con:name>data[0].name</con:name><con:value>{"data":[{"id":383,"name":"Network1","description":"QA Network","type":"PUBLIC_LAN","vlanId":2,"staticIpv4NetworkConfiguration":{"gateway":"72.162.0.1","subnet":"255.255.255.0","primaryDns":"72.162.0.1","secondaryDns":"72.162.0.2","dnsSuffix":"test.com","ipRange":[{"id":384,"startingIp":"72.162.0.90","endingIp":"72.162.0.92"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true},{"id":388,"name":"Network2","description":"QA Network","type":"PRIVATE_LAN","vlanId":4094,"staticIpv4NetworkConfiguration":{"gateway":"200.200.0.1","subnet":"255.0.0.0","primaryDns":"200.162.0.1","secondaryDns":"200.200.0.4","dnsSuffix":"test.com","ipRange":[{"id":389,"startingIp":"200.100.0.1","endingIp":"200.100.0.20"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true}],"pagination":{"offset":0,"limit":10,"total":2},"pages":{"current":1,"previous":-1,"next":-1,"total":1}}</con:value></con:property><con:property><con:name>data.name[0]</con:name><con:value>{"data":[{"id":383,"name":"Network1","description":"QA Network","type":"PUBLIC_LAN","vlanId":2,"staticIpv4NetworkConfiguration":{"gateway":"72.162.0.1","subnet":"255.255.255.0","primaryDns":"72.162.0.1","secondaryDns":"72.162.0.2","dnsSuffix":"test.com","ipRange":[{"id":384,"startingIp":"72.162.0.90","endingIp":"72.162.0.92"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true},{"id":388,"name":"Network2","description":"QA Network","type":"PRIVATE_LAN","vlanId":4094,"staticIpv4NetworkConfiguration":{"gateway":"200.200.0.1","subnet":"255.0.0.0","primaryDns":"200.162.0.1","secondaryDns":"200.200.0.4","dnsSuffix":"test.com","ipRange":[{"id":389,"startingIp":"200.100.0.1","endingIp":"200.100.0.20"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true}],"pagination":{"offset":0,"limit":10,"total":2},"pages":{"current":1,"previous":-1,"next":-1,"total":1}}</con:value></con:property><con:property><con:name>data[0]</con:name><con:value>{"data":[{"id":383,"name":"Network1","description":"QA Network","type":"PUBLIC_LAN","vlanId":2,"staticIpv4NetworkConfiguration":{"gateway":"72.162.0.1","subnet":"255.255.255.0","primaryDns":"72.162.0.1","secondaryDns":"72.162.0.2","dnsSuffix":"test.com","ipRange":[{"id":384,"startingIp":"72.162.0.90","endingIp":"72.162.0.92"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true},{"id":388,"name":"Network2","description":"QA Network","type":"PRIVATE_LAN","vlanId":4094,"staticIpv4NetworkConfiguration":{"gateway":"200.200.0.1","subnet":"255.0.0.0","primaryDns":"200.162.0.1","secondaryDns":"200.200.0.4","dnsSuffix":"test.com","ipRange":[{"id":389,"startingIp":"200.100.0.1","endingIp":"200.100.0.20"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true}],"pagination":{"offset":0,"limit":10,"total":2},"pages":{"current":1,"previous":-1,"next":-1,"total":1}}</con:value></con:property><con:property><con:name>data.id</con:name><con:value>{"data":[{"id":383,"name":"Network1","description":"QA Network","type":"PUBLIC_LAN","vlanId":2,"staticIpv4NetworkConfiguration":{"gateway":"72.162.0.1","subnet":"255.255.255.0","primaryDns":"72.162.0.1","secondaryDns":"72.162.0.2","dnsSuffix":"test.com","ipRange":[{"id":384,"startingIp":"72.162.0.90","endingIp":"72.162.0.92"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true},{"id":388,"name":"Network2","description":"QA Network","type":"PRIVATE_LAN","vlanId":4094,"staticIpv4NetworkConfiguration":{"gateway":"200.200.0.1","subnet":"255.0.0.0","primaryDns":"200.162.0.1","secondaryDns":"200.200.0.4","dnsSuffix":"test.com","ipRange":[{"id":389,"startingIp":"200.100.0.1","endingIp":"200.100.0.20"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true}],"pagination":{"offset":0,"limit":10,"total":2},"pages":{"current":1,"previous":-1,"next":-1,"total":1}}</con:value></con:property><con:property><con:name>data.id[0]</con:name><con:value>{"data":[{"id":383,"name":"Network1","description":"QA Network","type":"PUBLIC_LAN","vlanId":2,"staticIpv4NetworkConfiguration":{"gateway":"72.162.0.1","subnet":"255.255.255.0","primaryDns":"72.162.0.1","secondaryDns":"72.162.0.2","dnsSuffix":"test.com","ipRange":[{"id":384,"startingIp":"72.162.0.90","endingIp":"72.162.0.92"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true},{"id":388,"name":"Network2","description":"QA Network","type":"PRIVATE_LAN","vlanId":4094,"staticIpv4NetworkConfiguration":{"gateway":"200.200.0.1","subnet":"255.0.0.0","primaryDns":"200.162.0.1","secondaryDns":"200.200.0.4","dnsSuffix":"test.com","ipRange":[{"id":389,"startingIp":"200.100.0.1","endingIp":"200.100.0.20"}],"ipAddress":null},"createdTime":"2015-10-19","createdBy":null,"updatedTime":"2015-10-19","updatedBy":null,"link":null,"static":true}],"pagination":{"offset":0,"limit":10,"total":2},"pages":{"current":1,"previous":-1,"next":-1,"total":1}}</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": false</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>1074</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiIzNmVlNzQ1NS0yY2Q4LTRhM2YtYWQzYi0xMDE0MjBiYzM1MzQiLCJleHAiOjE0NzUxNjAwNDYsIm5iZiI6MCwiaWF0IjoxNDc1MTU5OTg2LCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImE2ZDU5ZDc2LWIxOTEtNDVlYi04MmQwLWI3YTY3ZTRiNWYwNyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6ImNiYjZhNzNlLTY4MTEtNGMxYS05NzU2LWJjNzBkMDE5ZTQxZiIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.Ejisw-0vGKHkjejmnPOeiq6N8sUHKNagPLSEHf40lCLMSLN99SrVk1hg10Khz7RoK8JAQg5FOiC6BT2ZLCZso16F2sKWUCobRIS2CB7PCNjy6PMHe4milUsOf3B2hHxJSt5p3MgAyNsQRU49xGG6UlH9X-UkKDTL0-shW0Mcw2xw0-tbweFqyherkq6-nKqYPn6G7yAGV-dq2FVgFoMA3TvI3KpSpqr7A3zmtUvB5ICoqIcXD4iYVl5nMs0bnhbnPDaCFlt-mv8cdtDnNrwt8lrdjz6Jr9ygkUurRo4QS4fD62EhvhDaHVBMmxtWm7bRuEg9vLDapjsj8JU2IbLfoA</con:value></con:property></con:properties></con:testCase><con:testCase id="018a4b06-a3ad-4b61-b6ec-fa0cb25e65db" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validUpdateIPv4Range" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="ad8e9ed2-a3dc-4318-8d6a-9fd5ba122f17" disabled="true">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="d4d2d0bc-3a10-45fa-8a63-2054e13a144c" disabled="true">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="28fff30f-1bfe-4679-ba0a-e1e43ffc1d6b"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="0da66b7b-eab3-49e4-9511-60e2e935bc3b">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="17a0920f-37d0-41be-990c-7d46297550d3"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="0b433ee4-7855-4d9a-a79f-a0bb6f200c94">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetIPv4RangeId" id="7b8aa56f-f563-4827-95b8-88318e68c8c9"><con:settings/><con:config><script>//
// This script will harvest the first range ID for network networkId obtained
// by calling the getAllNetworks test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)
//
// Get index of original rangeId index, and verify original IP range.
//
networkId = testRunner.testCase.getPropertyValue("networkId")
index = slurpResponse.data.id.findIndexOf{it ==~ /$networkId/}

assert index != null
assert slurpResponse.data[index].staticIpv4NetworkConfiguration.ipRange.id.toString()

testRunner.testCase.setPropertyValue("RangeId", slurpResponse.data[index].staticIpv4NetworkConfiguration.ipRange.id[0].toString())
log.info(slurpResponse.data[index].staticIpv4NetworkConfiguration.ipRange.id[0].toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="readAddIPv4RangeData" id="5d13886c-f06d-47d5-a300-b1b8f9db3f25"><con:settings/><con:config><script>//
// This script will read the file below for valid IPv4 addresses to add to the
// network created in the createNetwork test step.
//
// Note that the IPv4 addresses can't be added in isolation to the network - 
// the IPv4 addresses in the file below must be compatible ith the subnet
// (netmask) value used to create the network.
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validAddIPv4Data.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

firstLine = context.fileReader.readLine()

if(firstLine != null)
{
     String[] propData = firstLine.split(",")

     testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
     testRunner.testCase.setPropertyValue("networkAddEndingIp", propData[1])
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="updateIPV4Range" id="29da5516-1b58-4eaf-b6c5-9d7846aa716a">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/{rangeId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateIPV4Range" id="83fe57c0-1bad-45be-ae91-430707ec4473" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "id": ${#TestCase#RangeId},
     "startingIp": "${#TestCase#networkAddStartingIp}",
     "endingIp": "${#TestCase#networkAddEndingIp}"
}
						</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9dcd46af-d776-4422-aa0c-761ad6096b4f" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204
								</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="rangeId" value="${#TestCase#RangeId}"/>
  <con:entry key="networkStartingIp" value="${#TestCase#networkStartingIp}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkEndingIp" value="${#TestCase#networkEndingIp}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>rangeId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="getNetwork" id="c68f4410-b47f-43ad-9347-df1139180f48">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyNetworkInfo" id="53b30784-1e40-493d-bbeb-0df75425631f"><con:settings/><con:config><script>//
// This script will verify that the Get Network API returns the newly added IPv4 
// range information as was added by the Add IPv4 Range was called.
//
// Note that this script expects there are only two IP range values.
//
import groovy.json.JsonSlurper

def responseMessage = testRunner.testCase.getTestStepByName("getNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(responseMessage)

assert jsonSlurper.name == testRunner.testCase.getPropertyValue("networkName")
assert jsonSlurper.description == testRunner.testCase.getPropertyValue("networkDescription")
assert jsonSlurper.type == testRunner.testCase.getPropertyValue("networkType")
assert jsonSlurper.vlanId.toString() == testRunner.testCase.getPropertyValue("VLanId").toString()
assert jsonSlurper.static.toString() == testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//
// Can we verify dynamic network info?
//
if("true" == jsonSlurper.static.toString())
{
     assert jsonSlurper.staticIpv4NetworkConfiguration.gateway == testRunner.testCase.getPropertyValue("networkGateway")
     assert jsonSlurper.staticIpv4NetworkConfiguration.subnet == testRunner.testCase.getPropertyValue("networkSubnet")
     assert jsonSlurper.staticIpv4NetworkConfiguration.dnsSuffix == testRunner.testCase.getPropertyValue("networkDnsSuffix")
     assert jsonSlurper.staticIpv4NetworkConfiguration.primaryDns == testRunner.testCase.getPropertyValue("networkPrimaryDns")
     assert jsonSlurper.staticIpv4NetworkConfiguration.secondaryDns == testRunner.testCase.getPropertyValue("networkSecondaryDns")
//
// Get index of original rangeId index, and verify original IP range.
//
     rangeId = testRunner.testCase.getPropertyValue("RangeId")
     index = jsonSlurper.staticIpv4NetworkConfiguration.ipRange.id.findIndexOf{it==~ /$rangeId/}
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].startingIp == testRunner.testCase.getPropertyValue("networkAddStartingIp")
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].endingIp == testRunner.testCase.getPropertyValue("networkAddEndingIp")
}
</script></con:config></con:testStep><con:testStep type="goto" name="loopToReadAddIPv4RangeData" id="beb53fea-5fd2-4230-bc81-6ca50849072b"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>whire true()</con:name><con:type>XPATH</con:type><con:expression>true</con:expression><con:targetStep>readAddIPv4RangeData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="e7667e3b-a353-445b-8fb3-32be9d744e13"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="67a908ba-11f5-43a1-a0c6-509698fc3c7f">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>3713f005-a5ec-4d3c-aa73-de68b17653b0</con:value></con:property><con:property><con:name>networkId</con:name><con:value>2076</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>ipv4RangeId</con:name><con:value>[539]</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>2077</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value>72.162.0.89</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJhZDI5Yjk1NS01YTYyLTQ2NzEtYTg3OC03MWE0NmI4MDRjYzQiLCJleHAiOjE0NzUxNjAwNTAsIm5iZiI6MCwiaWF0IjoxNDc1MTU5OTkwLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjgxNjcxMTVjLWJkZjEtNGE1Ny1iNDY4LTcxOTdlNDM1ZGRjZSIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjdmYjZjMjcxLWFlMzgtNGNkMC1iMjY2LWQ4ZGU2OTlhOGMzOSIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.F2daDaoWlGL9g7cQ0o7yqi6hLcKtRGEjkZ48esGddCb7FeX1bZeYb3n15TYFFHHt1qQ7S0VWz6DtvpkqHOwvYTMpKWOcfg-pbtAWRfjktkOGL93lISXoi7eZBh-IZOP66yVJ99TxZQr_Y-76a4sSmFRHpNkykSHDx8IVU-Mb5GsM0W9Ujc2_xV6GmzzTZd6XgM6VV3u77Eizb7e2On3JpkN9lrPNykcijTbyscWnljvPzZL4b7oFfHGvy7mqQda_rIvKivTkFq9l07J40ZG5MQQEwTqlFFGuZnNGPEB-4-gJs57KUyGp5bwJEnH7HFORD-zK500EJVKrcUNKLLSUHg</con:value></con:property></con:properties></con:testCase><con:testCase id="faccdc4f-0e5b-444b-9c2d-ef52e1bcd314" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validDeleteIPv4Range" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="5f1b6d19-c638-4f68-97a0-8e05fa6661b0" disabled="true">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="1d5a92ad-d385-46bd-8fb3-8612be662f2b" disabled="true">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="96413db3-d920-4859-b615-e70b5b3b8dfb"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="e0a80ad2-de33-4706-b61e-c1ff2f7fd149">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="5704bc10-e55a-4895-937b-29c595e7aad2"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="89f39ea3-2c01-4a22-8609-2272d143362c">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetIPv4RangeId" id="d7197de8-af97-4154-9e94-92ba6d96b882"><con:settings/><con:config><script>//
// This script will harvest the first range ID for network networkId obtained
// by calling the getAllNetworks test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)
//
// Get index of original rangeId index, and verify original IP range.
//
networkId = testRunner.testCase.getPropertyValue("networkId")
index = slurpResponse.data.id.findIndexOf{it ==~ /$networkId/}

assert index != null
assert slurpResponse.data[index].staticIpv4NetworkConfiguration.ipRange.id.toString()

testRunner.testCase.setPropertyValue("RangeId", slurpResponse.data[index].staticIpv4NetworkConfiguration.ipRange.id[0].toString())
log.info(slurpResponse.data[index].staticIpv4NetworkConfiguration.ipRange.id[0].toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="getNetwork" id="f2a81028-16fb-4a62-a8e7-72919a921bde">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="deleteIPV4Range" id="75b1b7f5-124b-400d-957f-e18ccf78b2a8">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/{rangeId}" methodName="DeleteIPV4Range Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteIPV4Range" id="83fe57c0-1bad-45be-ae91-430707ec4473" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bcfeb5b7-7739-47b2-8f29-93968666ec44" name="Valid HTTP Status Codes">
							<con:configuration><codes>204</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="rangeId" value="${#TestCase#RangeId}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="validateNetworkInfoDeleted" id="d3d45d1c-6608-4178-81a9-60273ce55e37" disabled="true"><con:settings/><con:config><script>//
// This script will validate that the ipRange field is null.
//
// Note that this script expects the Create Network step to create a network with
// just one pair of ipRange values!
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getNetwork").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)
log.info(slurpResponse)

assert(slurpResponse.staticIpv4NetworkConfiguration.ipRange[0] == null)
</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="3bf96c59-e91d-474a-9cbb-2d433c75a2f7">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>afb4e4fc-8862-4224-a5a7-07a9ec37abcd</con:value></con:property><con:property><con:name>networkId</con:name><con:value>2170</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>ipv4RangeId</con:name><con:value>[539]</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>2171</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJkMzc5NmY4NS0wYTE3LTQ4ODctYTE4Ni1lN2Q2YzcyMmZkMmEiLCJleHAiOjE0NzUxNjAwNTIsIm5iZiI6MCwiaWF0IjoxNDc1MTU5OTkyLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjdmMzE4YzI0LTJjYzktNGRhNS04MWU4LTY0MTFhNWQ4ZTIyMSIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjFmYmViY2EwLTAxZDktNDI0MS05MDFlLTk0N2RkN2QzN2NlNyIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.Bd8gZvTH_qew-Jltu4GpBvu4EqK03xnFYsC5jHMRfUtyVn8u1aIrqD4ep2cgMTg7crJTxZvvGblCcUlDnhZtWZr-gWgtg_J6vlsoKk_2IrOQTDGQe-VJJh-UkAdz7IPWhRb5EDR5YrvNDvtvRiUfdQX7j111uID0qIOkX9WlkisijFuf5AKbxj9uNDDL3wruRyWdBUCvhp0g-NA8NGazs-DQpIQV96Av47h9RuKFZUemMOfkfOUfx5i5cm0HFAvW4e8dFPMEUg7d40Pz2f_A9a1ArV1Mm0tI6o16-2-o85zw-drzUmLLOYX1dPytY_jbGhI63CzvlBQnm9jWmCLM1Q</con:value></con:property></con:properties></con:testCase><con:testCase id="152370d2-65b0-4702-a97a-619932698232" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validAddIPv4Range" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="bccb0fd4-37a9-405c-8b0e-8346b8474b35" disabled="true">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="54ec84fb-1d71-4205-80ef-724ec20eef5b" disabled="true">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="00f91b9f-c1c1-4368-9ea9-536087d31a0b"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="9c66fb71-b123-4ea6-aec2-b5e6a43e5301">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="b0c22509-cf5a-4c6c-b800-0b79bb71ea0e"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="cba91942-ca1f-4c6c-9182-0fb062d54df8">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetIPv4RangeId" id="4ba35c40-164a-4469-9626-e15c8b4b6c22"><con:settings/><con:config><script>//
// This script will harvest the first range ID for network networkId obtained
// by calling the getAllNetworks test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)
//
// Get index of original rangeId index, and verify original IP range.
//
networkId = testRunner.testCase.getPropertyValue("networkId")
index = slurpResponse.data.id.findIndexOf{it ==~ /$networkId/}

assert index != null
assert slurpResponse.data[index].staticIpv4NetworkConfiguration.ipRange.id.toString()

testRunner.testCase.setPropertyValue("RangeId", slurpResponse.data[index].staticIpv4NetworkConfiguration.ipRange.id[0].toString())
log.info(slurpResponse.data[index].staticIpv4NetworkConfiguration.ipRange.id[0].toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="readAddIPv4RangeData" id="430d3193-395b-473b-b9ee-a2664bd929df"><con:settings/><con:config><script>//
// This script will harvest the first network ID obtained by calling the
// getAllNetworks test step.
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String csvFilePath = groovyUtils.projectPath + "\\validAddIPv4Data.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))

firstLine = context.fileReader.readLine()
String[] propData = firstLine.split(",")

testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
testRunner.testCase.setPropertyValue("networkAddEndingIp", propData[1])
</script></con:config></con:testStep><con:testStep type="restrequest" name="addIPV4Range" id="4ab13035-888d-4540-9460-87434f483a08">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="addIPV4Range" id="f8f2c315-2eb3-4293-a8a6-30dd1ddbf079" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "startingIp": "${#TestCase#networkAddStartingIp}",
     "endingIp": "${#TestCase#networkAddEndingIp}"
}

						</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="81f3a7a9-33e8-4139-82db-3213ab4866e0" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>201</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkAddStartingIp" value="${#TestCase#networkAddStartingIp}"/>
  <con:entry key="networkAddEndingIp" value="${#TestCase#networkAddEndingIp}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="getNetwork" id="140e4317-d4c7-4be1-84ca-a408e09b4b00">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyNetworkInfo" id="7991c462-79b9-4e73-9308-5a0084c37b10"><con:settings/><con:config><script>//
// This script will verify that the Get Network API returns the newly added IPv4 
// range information as was added by the Add IPv4 Range was called.
//
// Note that this script expects there are only two IP range values.
//
import groovy.json.JsonSlurper

def responseMessage = testRunner.testCase.getTestStepByName("getNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(responseMessage)

assert jsonSlurper.name == testRunner.testCase.getPropertyValue("networkName")
assert jsonSlurper.description == testRunner.testCase.getPropertyValue("networkDescription")
assert jsonSlurper.type == testRunner.testCase.getPropertyValue("networkType")
assert jsonSlurper.vlanId.toString() == testRunner.testCase.getPropertyValue("VLanId").toString()
assert jsonSlurper.static.toString() == testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//
// Can we verify dynamic network info?
//
if("true" == jsonSlurper.static.toString())
{
     assert jsonSlurper.staticIpv4NetworkConfiguration.gateway == testRunner.testCase.getPropertyValue("networkGateway")
     assert jsonSlurper.staticIpv4NetworkConfiguration.subnet == testRunner.testCase.getPropertyValue("networkSubnet")
     assert jsonSlurper.staticIpv4NetworkConfiguration.dnsSuffix == testRunner.testCase.getPropertyValue("networkDnsSuffix")
     assert jsonSlurper.staticIpv4NetworkConfiguration.primaryDns == testRunner.testCase.getPropertyValue("networkPrimaryDns")
     assert jsonSlurper.staticIpv4NetworkConfiguration.secondaryDns == testRunner.testCase.getPropertyValue("networkSecondaryDns")
//
// Get index of original rangeId index, and verify original IP range.
//
     rangeId = testRunner.testCase.getPropertyValue("RangeId")
     index = jsonSlurper.staticIpv4NetworkConfiguration.ipRange.id.findIndexOf{it==~ /$rangeId/}
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].startingIp == testRunner.testCase.getPropertyValue("networkStartingIp")
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].endingIp == testRunner.testCase.getPropertyValue("networkEndingIp")
//
// And, now find the new rangeid index, and verify the new IP range.
//
     index = (++index) % 2
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].startingIp == testRunner.testCase.getPropertyValue("networkAddStartingIp")
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[index].endingIp == testRunner.testCase.getPropertyValue("networkAddEndingIp")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="aa65e1bf-33a3-4d7a-8c14-79fdf122d4b6">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>fd5f0829-9db9-4dbb-9213-8eaaa78a07cc</con:value></con:property><con:property><con:name>networkId</con:name><con:value>2175</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>ipv4RangeId</con:name><con:value>[539]</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>2176</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value>72.162.0.89</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJiMDFlYzM2Ny0zNWQxLTQ4MGUtODJiNy00YTEwODUwNGRjYTQiLCJleHAiOjE0NzUxNjAwNTMsIm5iZiI6MCwiaWF0IjoxNDc1MTU5OTkzLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjY3ZDg2MzVlLTE5OTYtNGUyZS05ODU4LTNlZWExZmYzMDE0YyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6Ijk2ZDI2NWMxLTg5MjYtNGRmYi1hZjU5LWQ0ZDViNWZiNTlhZSIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.Pk3b2cIHcgTRQtYCXmq8iRrvX-DuXIrBGAgRqJkLyLjPUkcunwkDcoIo9POoWVKEj9q5fXzvt56B6wet00jqQu15NNZoelhQWYaJb70Mcsi9W7P4PEIE4Bg91LaLA7ioYPt1CGGzCrW3RGqxoHuS6aUpMn6hhSmxm-IMplUFykpcSDt11uFSn9_MIkfBRPq8uNMDt2nU-OrLaR4ZM_CLCijb9SebLn-KzVOceEMrFdVv42bfmrgKiQ5IJDvfqZWhfZ7gYL0Hf0RKVAxdXl11nOBbFqLiBPSR6uANGRluvCey7tK5MsPGwXccwmu1TZKU3blzoz6ev5rSoEqhGSeN4w</con:value></con:property></con:properties></con:testCase><con:testCase id="76ed2bfb-f1bc-47d8-a215-621bb097df92" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidCreateNetwork-401" searchProperties="true"><con:settings/><con:testStep type="groovy" name="readCreateNetworkData" id="eacf2a21-4633-4916-8c2d-cdc3828f7769"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="8de63f11-3e25-400c-86d2-5f4c6d0daecf">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>401</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToCreateInvalidJSessionId" id="aca19e7c-65cb-405b-bcf4-b38d2dff7efa"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidJSessionId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopDone" id="1b7bb01c-8a94-4491-a817-b2843786f695"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>054bed58-6574-4b67-b6f4-ebf4cb10d297</con:value></con:property><con:property><con:name>networkId</con:name><con:value>{"error":{"code":200003,"severity":"CRITICAL","message":"Permission to perform this operation was denied","details":"The user does not have the required role or permission to perform this operation"}}</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property></con:properties></con:testCase><con:testCase id="2fd071f6-df77-4c4b-b848-5a1d6d2be581" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidGetAllNetworks-401" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getAllNetworks" id="e778dd20-2947-4e57-a266-bbb6a529fdb6">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration><codes>401</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToCreateInvalidJSessionId" id="0ea8eeef-396b-4126-a28b-0170706e2474"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidJSessionId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopDone" id="a3648bd1-0759-4771-965e-192f3e142402"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>1be13c9b-6adf-4422-80e8-ba3d84dc1272</con:value></con:property><con:property><con:name>networkId</con:name><con:value>{"error":{"code":200003,"severity":"CRITICAL","message":"Permission to perform this operation was denied","details":"The user does not have the required role or permission to perform this operation"}}</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property></con:properties></con:testCase><con:testCase id="ffb68884-6210-413e-9956-6bd3cf386057" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidGetNetwork-401" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getNetwork" id="29ad5257-bf5f-4522-aea7-1cf00e840fc1">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>401
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToCreateInvalidJSessionId" id="60f0d0ee-05ac-4952-aa3e-e44d3524636e"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidJSessionId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopDone" id="6919f665-ac71-4d22-bb81-423dca7c96d9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>e05562e4-7a81-4eb2-8a36-66333ffdf19d</con:value></con:property><con:property><con:name>networkId</con:name><con:value>{"error":{"code":200003,"severity":"CRITICAL","message":"Permission to perform this operation was denied","details":"The user does not have the required role or permission to perform this operation"}}</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property></con:properties></con:testCase><con:testCase id="f144b04e-ce40-446a-82f2-7d1c2a60a260" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidUpdateNetwork-401" searchProperties="true"><con:settings/><con:testStep type="groovy" name="readUpdateNetworkData" id="ca533603-0e43-439f-b4d3-9545fc0f2282"><con:settings/><con:config><script>//
// This script will alter the network identified by networkId using information
// from the file below.
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//
if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validUpdateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

firstLine = context.fileReader.readLine()
log.info(firstLine)
String[] propData = firstLine.split(",")

testRunner.testCase.setPropertyValue("networkName", propData[0])
testRunner.testCase.setPropertyValue("networkDescription", propData[1])
testRunner.testCase.setPropertyValue("networkType", propData[2])
testRunner.testCase.setPropertyValue("VLanId", propData[3])
testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4])
testRunner.testCase.setPropertyValue("networkGateway", propData[5])
testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
testRunner.testCase.setPropertyValue("networkPrimaryIp", propData[8])
testRunner.testCase.setPropertyValue("networkSecondaryIp", propData[9])

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null</script></con:config></con:testStep><con:testStep type="restrequest" name="updateNetwork" id="a7c54bce-3db4-4104-9462-6c4c284dd89e">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateNetwork" id="7f3809ad-618a-4308-b62e-6bce71e3f162" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "id": ${#TestCase#networkId},
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="83c303bb-b7c6-4849-a3ae-de1df5691bce" name="Valid HTTP Status Codes">
							<con:configuration><codes>401
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCase#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="1"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="staticIPV4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPV4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToCreateInvalidJSessionId" id="13021ff9-c8bb-4a37-8a18-b1b0e4253c11"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidJSessionId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopDone" id="3cf3fd76-7843-4bec-8ced-7332fb95a294"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>3a95e157-0552-49a5-9882-ce3b92e19eb5</con:value></con:property><con:property><con:name>networkId</con:name><con:value>1758</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network2</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PRIVATE_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>100.100.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>192.0.0.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>100.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>100.200.0.4</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>4000</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property></con:properties></con:testCase><con:testCase id="666d7718-0949-4ae3-8162-bdbe712fa257" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidDeleteNetwork-401" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deleteNetwork" id="103f6328-9ed4-4bb5-9cb2-09564165dd6c">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration><codes>401
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToCreateInvalidJSessionId" id="7bb51210-a640-4f5f-8e61-605b267bb44c"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidJSessionId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopDone" id="f719cabe-ebea-48eb-be0e-eae399fde3d8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>50d5acec-959e-4cce-af52-1f94748fda7f</con:value></con:property><con:property><con:name>networkId</con:name><con:value>{"error":{"code":200003,"severity":"CRITICAL","message":"Permission to perform this operation was denied","details":"The user does not have the required role or permission to perform this operation"}}</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property></con:properties></con:testCase><con:testCase id="9e9198c6-6da5-41e9-8a97-af5a446e39a3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidAddIPv4Range-401" searchProperties="true"><con:settings/><con:testStep type="groovy" name="readAddIPv4RangeData" id="f4a02850-529e-4efa-9f47-d978de389e8b"><con:settings/><con:config><script>//
// This script will harvest the first network ID obtained by calling the
// getAllNetworks test step.
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String csvFilePath = groovyUtils.projectPath + "\\validAddIPv4Data.csv"
//def csvFilePath = "H:\\git\\icee_build\\bvt\\validIPv4Data.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))

firstLine = context.fileReader.readLine()

String[] propData = firstLine.split(",")

testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
testRunner.testCase.setPropertyValue("networkAddEndingIp", propData[1])

//log.info(propData[4])

</script></con:config></con:testStep><con:testStep type="restrequest" name="addIPV4Range" id="e683d25c-f116-4657-b0aa-29580027395b">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="addIPV4Range" id="f8f2c315-2eb3-4293-a8a6-30dd1ddbf079" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "startingIp": "${#TestCase#networkAddStartingIp}",
     "endingIp": "${#TestCase#networkAddEndingIp}"
}
					</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="81f3a7a9-33e8-4139-82db-3213ab4866e0" name="Valid HTTP Status Codes">
							<con:configuration><codes>401
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkAddStartingIp" value="${#TestCase#networkAddStartingIp}"/>
  <con:entry key="networkAddEndingIp" value="${#TestCase#networkAddEndingIp}"/>
  <con:entry key="networkId" value="1"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToCreateInvalidJSessionId" id="87ef5170-23d5-4244-9ba5-5954da0df519"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidJSessionId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopDone" id="14cf36b1-70e8-4059-8f2f-cfa67c4e9878"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>6eeda4e3-9508-47f5-ae7f-cfb1fef6d287</con:value></con:property><con:property><con:name>networkId</con:name><con:value>{"error":{"code":200003,"severity":"CRITICAL","message":"Permission to perform this operation was denied","details":"The user does not have the required role or permission to perform this operation"}}</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value>72.162.0.89</con:value></con:property></con:properties></con:testCase><con:testCase id="584dfc60-d84c-4c14-bc29-81e0ec7dfa19" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidUpdateIPv4Range-401" searchProperties="true"><con:settings/><con:testStep type="groovy" name="readAddIPv4RangeData" id="09ca00e6-7af8-4691-95af-28df6bf4196f"><con:settings/><con:config><script>//
// This script will harvest the first network ID obtained by calling the
// getAllNetworks test step.
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String csvFilePath = groovyUtils.projectPath + "\\validAddIPv4Data.csv"
//def csvFilePath = "H:\\git\\icee_build\\bvt\\validIPv4Data.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))

firstLine = context.fileReader.readLine()

String[] propData = firstLine.split(",")

testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
testRunner.testCase.setPropertyValue("networkAddEndingIp", propData[1])

//log.info(propData[4])

</script></con:config></con:testStep><con:testStep type="restrequest" name="updateIPV4Range" id="72085828-4d8e-4400-883e-a8c30578d73f">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/{rangeId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateIPV4Range" id="83fe57c0-1bad-45be-ae91-430707ec4473" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "id": 1,
     "startingIp": "${#TestCase#networkStartingIp}",
     "endingIp": "${#TestCase#networkEndingIp}"
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9dcd46af-d776-4422-aa0c-761ad6096b4f" name="Valid HTTP Status Codes">
							<con:configuration><codes>401
				</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="rangeId" value="1"/>
  <con:entry key="networkStartingIp" value="${#TestCase#networkStartingIp}"/>
  <con:entry key="networkId" value="1"/>
  <con:entry key="networkEndingIp" value="${#TestCase#networkEndingIp}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>rangeId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToCreateInvalidJSessionId" id="81ea8dbe-b821-4f47-b2b2-bb3b995445c2"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidJSessionId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopDone" id="00e488b7-652e-4a1c-a1ab-7980cf4d335f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>fa017c52-faa9-46c5-9d06-77182b2fb2a8</con:value></con:property><con:property><con:name>networkId</con:name><con:value>{"error":{"code":200003,"severity":"CRITICAL","message":"Permission to perform this operation was denied","details":"The user does not have the required role or permission to perform this operation"}}</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value>72.162.0.89</con:value></con:property></con:properties></con:testCase><con:testCase id="7fb93088-3208-414c-aeeb-de7b939709cf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidDeleteIPv4Range-401" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deleteIPV4Range" id="169cb60a-82f3-41c5-8db1-8e6a4ea090a0">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/{rangeId}" methodName="DeleteIPV4Range Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteIPV4Range" id="83fe57c0-1bad-45be-ae91-430707ec4473" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bcfeb5b7-7739-47b2-8f29-93968666ec44" name="Valid HTTP Status Codes">
							<con:configuration><codes>401
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="rangeId" value="1"/>
  <con:entry key="networkId" value="1"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToCreateInvalidJSessionId" id="7b205177-d50f-4a0b-81d9-ba3239d53e08"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidJSessionId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopDone" id="434a70bc-568c-4f1d-9222-10746b36a713"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>7f7d80c7-6a63-42c0-825d-b44578fd0c65</con:value></con:property><con:property><con:name>networkId</con:name><con:value>{"error":{"code":200003,"severity":"CRITICAL","message":"Permission to perform this operation was denied","details":"The user does not have the required role or permission to perform this operation"}}</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>72.162.10.90</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value>72.162.10.92</con:value></con:property></con:properties></con:testCase><con:testCase id="7acc11aa-49c6-42b5-9ff3-f6cf833e769c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidGetAllNetworks-400" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="cd21bd8e-b6ce-43b0-953d-0859ac3ee2df">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://172.31.59.171:8081</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="client_secret" value="acbfc7ae-a457-4eaf-9fab-386b139f8fa1" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="ab4a8127-ccbf-4c9d-b191-249700d60103">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readInvalidGetAllNetworkData" id="eb3cdb01-2a81-44e1-b66e-c5aa57b6a218"><con:settings/><con:config><script>//
// This script will read the file below to obtain invalid invalid offset and
// limit values.
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidGetAllNetworksData.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")
     String[] propData = testSetupLine.split(",")

     testRunner.testCase.setPropertyValue("offset", propData[0])
     testRunner.testCase.setPropertyValue("limit", propData[1])

     log.info("Leaving readInvalidGetAllNetworksData")
}
else
{
     log.info("Shutting down fileReader")
	context.fileReader.close()
	context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="9a9ec2f8-1ccf-4a16-b4e8-8865d04b9d68">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>http://${#Project#ApplianceIP}:8080</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration><codes>400</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="offset" value="${#TestCase#offset}"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToReadInvalidGetAllNetworksData" id="35f9d17c-434f-4ec0-8b1e-4b248cfcd854"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readInvalidGetAllNetworkData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="970a9cac-ef66-4885-8854-937e41075720"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>9317b8d2-3011-4a33-af02-53e18fe48d83</con:value></con:property><con:property><con:name>networkId</con:name><con:value>{"error":{"code":200003,"severity":"CRITICAL","message":"Permission to perform this operation was denied","details":"The user does not have the required role or permission to perform this operation"}}</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>offset</con:name><con:value>0</con:value></con:property><con:property><con:name>limit</con:name><con:value>0x1</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiIyNjFjNDNhMy1iMjY0LTQ2OWEtYjI4NC00NmI4ZWQxMzU1MTkiLCJleHAiOjE0NTk4MDQ1NTIsIm5iZiI6MCwiaWF0IjoxNDU5ODA0NDkyLCJpc3MiOiJodHRwOi8vMTcyLjMxLjU5LjE3MTo4MDgxL2F1dGgvcmVhbG1zL3NwcmluZy1kZW1vIiwiYXVkIjoiY3VzdG9tZXItcG9ydGFsIiwic3ViIjoiZTYzMDhhZTYtZmQ4Ni00ZWU2LWIxY2ItZTZjZDNmMzJjZDU4IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VzdG9tZXItcG9ydGFsIiwic2Vzc2lvbl9zdGF0ZSI6ImNmM2JjOWU5LTk3NDQtNGZmNy04MTMzLTA3ZWNlM2MyNjg3NyIsImNsaWVudF9zZXNzaW9uIjoiZmU2NzY3YzEtYjQxOC00NTZmLTljZDktNjFhYzgxMTgwMDNlIiwiYWxsb3dlZC1vcmlnaW5zIjpbImh0dHA6Ly8xNzIuMjQuNC4xMTQiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIlJPTEVfVVNFUiIsIlJPTEVfQ09ORklHVVJFX05FVFdPUksiLCJST0xFX1JFQUQiLCJST0xFX1dSSVRFIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsic29hcHVpLWJlYXJlciI6eyJyb2xlcyI6WyJVU0VSIl19LCJjdXN0b21lci1wb3J0YWwiOnsicm9sZXMiOlsiQURNSU4iLCJVU0VSIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50Iiwidmlldy1wcm9maWxlIl19fSwibmFtZSI6Im1pY2hhZWwgaGVwZmVyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoibWljaGFlbF9oZXBmZXIiLCJnaXZlbl9uYW1lIjoibWljaGFlbCIsImZhbWlseV9uYW1lIjoiaGVwZmVyIiwiZW1haWwiOiJtaWNoYWVsX2hlcGZlckBkZWxsLmNvbSJ9.IZZuiCY9biObyFawsDM05FwJoWg0GRvi2pjbCfExJvDqvcjI-MkpvaiQURuJOjEkSmyjAP2iCgc38VRJud2GRRqWo9-dLjQI8VrQ-tm73zP0OsChD_-fq_exAzufDPbDKU7C1h6gk-xi3B9M4CZ6x8WXct6RV4Rg3vxAhKomf04</con:value></con:property></con:properties></con:testCase><con:testCase id="91997627-1a50-43b9-99b0-63b3ad261a05" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidGetNetwork-400" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="7e80a2de-0e2a-4bf5-9bea-37949536766b">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="2cf40844-b6c8-4418-ab5a-e63a269ca559">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readInvalidGetNetworkData" id="cab45ebe-d67b-4372-808d-ed6062bd7a36"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidGetNetwork-400
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidGetNetworkData.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")
     log.info(testSetupLine)

     testRunner.testCase.setPropertyValue("networkId", testSetupLine)

     log.info("Leaving readInvalidGetNetworkData")
}
else
{
     log.info("Shutting down fileReader")
	context.fileReader.close()
	context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="getNetwork" id="243d7c55-f0ba-4e7d-93c3-d92abc017f27">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>400
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkid}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToReadInvalidGetNetworkData" id="1e953ef2-0330-49ea-aa90-7dcf6c13bef5"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readInvalidGetNetworkData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="5b376f0e-0f4a-4be9-8184-c9a31128db51"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>89761cea-14c7-4fb6-b393-d96335ef5755</con:value></con:property><con:property><con:name>networkId</con:name><con:value>Z</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiIxMjM2NmIyMy02ZDk2LTRhODEtYjhlMC01NjU4OWIxODE2NjciLCJleHAiOjE0NzUxNjAwNjIsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDAyLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjM5NGI0OTIwLTM5ZGMtNDYyYy1iNmE4LWRhM2I5OTgwMDQ4ZiIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6ImFlY2FmNGZhLTFkZjEtNDBjZC05NjM2LTZhZjQwNDVmYTY1ZSIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.R7oZytMk4ZAVTsKlTMJ544xU7BqnN8cScPmSJj88TOKWf0gj32GOTv4YoDJCEyyBYdqxKARya_tWPeukg-hzf8HuFxjEq47NlyvMTglzrIMazkvoGIQgH81YTbD6Rzt7l1oQClDg08BGRCpYKYXJBJX57SwWd0D-NkzVP9oDmF1CQgQp5bDZJDmeRX6baPNU7I78x1lkoxaW_6C5_7c8qI1ej4U9hC3AiydVk9DTO7ruSfAq6kGHYbw2rHFlWCRSUnyDHGTK7XocDy2jj1we2eJHlgRlrLSc4D6itUIrTwcBp3qOjZYge9Y9TJGrnagsAszeqyg7n7cOZ3aW7vfQNg</con:value></con:property></con:properties></con:testCase><con:testCase id="1bdaff75-699b-4ee8-b130-c9eb63dfecc6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidCreateNetwork-400" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="1c1285b8-6aff-463d-83d7-0fcf933a8995">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="a7c4e0f6-3846-4c24-adb9-bc9a3308272e">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readInvalidCreateNetworkData" id="f0b7262a-3939-40b8-bcd9-93dcd4c9e910"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidCreateNetwork-400
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidCreateNetworkData.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving reading invalidCreateNetworkData")
}
else
{


     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="3b66a7a5-ae2b-4051-aa5c-8343fd3976af">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>400</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyAFCNotPopulated" id="148786ff-78fa-4577-8abf-b074bc7e6baa" disabled="true"><con:settings/><con:config><script>//
// This script will verify that the AFC has the basic info from
// a Create Network call.
//
// plink (part of the PuTTY package will be used to access the ICEE,
// then curl will be used to access the AFC VM.
//
// The network-type field returned will be mapped to the type provided
// during the Create/Update Network API.
//

windowsCmd = "cmd /c cd C:\\Program Files (x86)\\PuTTY &amp;"

plinkCmd = "plink.exe" + " " + testRunner.testCase.testSuite.project.getPropertyValue("ApplianceIP") + " " + "-l root -pw linux"

curlCmd = 'curl -H "Content-Type: application/json" -i -X GET http://admin:admin@100.66.1.21:8181/restconf/config/north-bound:fabrics/fabric/FABRIC1/network/'
curlCmd = curlCmd + testRunner.testCase.getPropertyValue("networkId")
command = windowsCmd + " " + plinkCmd + " " + curlCmd

result = command.execute().text
log.info(result)

assert result.contains("404 Not Found")
assert !(result.contains("network-id"))
assert !(result.contains("network-name"))
assert !(result.contains("network-type"))
assert !(result.contains("network-vlan-id"))
</script></con:config></con:testStep><con:testStep type="goto" name="loopToReadInvalidGetNetworkData" id="9ada5f0b-8114-4672-8ef5-89bfa5b4194e"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readInvalidCreateNetworkData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="136a87e8-9c84-4ef0-8cab-0b7cda828736"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>e48d6c20-f876-4cbc-bd05-031b5408df8d</con:value></con:property><con:property><con:name>networkId</con:name><con:value/></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Bad network</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Test Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>OOB_OR_INFRASTRUCTURE_MANAGEMENT</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>999</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiIzNTU1OTgwZC1kNWFmLTQyZjMtYjIyZi1mYzZkNDU2NDlkYTQiLCJleHAiOjE0NzUxNjAwNjQsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDA0LCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjM5MTM5NjVmLWNiMmMtNDgyYi05ZDg0LWVlNDdlZTFlODRhMyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjlhNmEyZGM2LWM4MDMtNGY1ZS1iMjViLWFiMWY1ODAwY2Q3MCIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.dh1MZ6lG74k-Q5LF8axoN5rMRGMf8fnD8Lfi-Dwq25E4l2ufrzfHDcLM-FcNOdpVPO5sdOS0rovt8WCO2vm4DtoUc4yEx19lS7i6NfeB75A_zrcH8q2yOEFSdoqH8-vFpHBO93VOt6K7Fxr9DhM8FD1yp6uVkuoRRlE8BTtgqd6ZQU05ZR6KPq7vwQEbqrLsmzyZqSn0UFbGKo0uVN5EXxNYF06-fdJIrg3AW0y1Ltl6gdp2-bBvw9mpTEEY8pqom2DMkBTHyR29YEDyrawnmM3-m3rmq6uoxndLSnbXjcnCwymDD1UxWYu48oKtHTxVtHSXayviFZOn9dxu4G4xCA</con:value></con:property></con:properties></con:testCase><con:testCase id="0b8d8653-0317-44d4-b93f-34d6d70ba696" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidUpdateNetwork-400" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="758cd3c3-2449-4a6e-88ae-7ed76d88ec3b">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://${#Project#KeycloakIP}:8081</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="a35803d0-13bb-4da2-91b6-423199f0db29">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="2002e29d-4dfa-4d48-a93f-f37abb23a526"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
          if((propData.size() > 10) &amp;&amp; !(propData.size() % 2))
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
          }     
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
          index = 10
          while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
          {
          	testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '          {\n'
          	staticNetworkBody = staticNetworkBody + '               "networkStartingIp": ' + '"' + propData[index++] + '",\n'      
     	     testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '               "networkEndingIp": ' + '"' + propData[index++] + '"\n'

               if( propData.size() > index)
          	     staticNetworkBody = staticNetworkBody + '          },\n'
               else
          	     staticNetworkBody = staticNetworkBody + '          }\n'
          	
          	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          }
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="c5cd607e-1958-4e9e-be1d-76cf47c1dc8e">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     "static": ${#TestCase#staticIPv4Network},
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "${#TestCase#networkGateway}",
          "subnet": "${#TestCase#networkSubnet}",
          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
          "primaryDns": "${#TestCase#networkPrimaryIp}",
          "secondaryDns": "${#TestCase#networkSecondaryIp}",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="3a79ed4f-dfda-46b3-aa90-3d9a969e5086"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="groovy" name="readInvalidUpdateNetworkData" id="3f8484d1-3801-4bdd-8cbd-1eed06f91fae"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidUpdateNetwork-400
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidUpdateNetworkData.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))

     context.loopIndex = 0
     context.saveNetworkId = testRunner.testCase.getPropertyValue("networkId")
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	
     }testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
     	staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readInvalidUpdateNetworkData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("deleteNetwork")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="updateNetwork" id="43a4af8c-5e29-4eaf-9884-cb3b457144f8">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateNetwork" id="7f3809ad-618a-4308-b62e-6bce71e3f162" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "id": ${#TestCase#networkId},
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="83c303bb-b7c6-4849-a3ae-de1df5691bce" name="Valid HTTP Status Codes">
							<con:configuration><codes>400
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="networkDescription" value="${#TestCase#networkDescription}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="staticIPV4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkGateway" value="${#TestCase#networGateway}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPV4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyOriginalAFCPopulation -orig" id="c7d7a5bd-7473-48cb-8ae8-23cee37ba3f3" disabled="true"><con:settings/><con:config><script>//
// This script will verify that the AFC has the basic info from
// a Create Network call.
//
// plink (part of the PuTTY package will be used to access the ICEE,
// then curl will be used to access the AFC VM.
//
// The network-type field returned will be mapped to the type provided
// during the Create/Update Network API.
//

windowsCmd = "cmd /c cd C:\\Program Files (x86)\\PuTTY &amp;"
plinkCmd = "plink.exe" + " " + testRunner.testCase.testSuite.project.getPropertyValue("ApplianceIP") + " " + "-l root -pw linux"
curlCmd = 'curl -H "Content-Type: application/json" -i -X GET http://admin:admin@100.66.1.21:8181/restconf/config/north-bound:fabrics/fabric/FABRIC1/network/'
curlCmd = curlCmd + testRunner.testCase.getPropertyValue("networkId")
command = windowsCmd + " " + plinkCmd + " " + curlCmd

result = command.execute().text
log.info(result)

assert result.contains("200 OK")
assert result.contains(testRunner.testCase.getPropertyValue("originalNetworkName"))
assert result.contains(testRunner.testCase.getPropertyValue("originalVLanId"))
assert result.contains(testRunner.testCase.getPropertyValue("networkId"))

switch(testRunner.testCase.getPropertyValue("originanNetworkType"))
{
case "PUBLIC_LAN":
case "PRIVATE_LAN":
case "OOB_OR_INFRASTRUCTURE_MANAGEMENT":
case "HYPERVISOR_MANAGEMENT":
case "HYPERVISOR_MIGRATION":
case "HYPERVISOR_CLUSTER_PRIVATE":
case "PXE":
case "FILESHARE":
case "HARDWARE_MANAGEMENT":
     assert result.contains("DATA_NETWORK")
     break
case "STORAGE_ISCSI_SAN":
case "STORAGE_FCOE_SAN":
     assert result.contains("STORAGE_NETWORK")
     break
case "FIP_SNOOPING":
     assert result.contains("PRIMISCUOUS_NETWORK")
     break
default:
     log.info("Unknown network type found")
}
</script></con:config></con:testStep><con:testStep type="goto" name="loopToReadInvalidUpdateNetworkData" id="71691a38-f079-4431-9990-8a956c6ea7d3"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readInvalidUpdateNetworkData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="7294ea11-3c61-4a01-96b4-0b2c5503d5e7" disabled="true"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="26f12c84-ef90-4e9c-8a1a-e29236bfc88f">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="4fea8c24-de2c-4ae2-b2fe-543fe2961ced">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="parseGetAllNetworksInfo" id="6bf084c2-13bd-4c59-9223-3cbbcf3f9023"><con:settings/><con:config><script>//
// This script will get the next networkId value as returned by the
// getAllNetworks test step.
//
import groovy.json.JsonSlurper

if(context.numNetworks == null)
{
     def responseMessage = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
     context.jsonSlurper = new JsonSlurper().parseText(responseMessage)
     log.info("raw network data: " + context.jsonSlurper.data)
     log.info("number of networks: " + context.jsonSlurper.data.size())

	log.info("setting up context variables")
     context.numNetworks = context.jsonSlurper.data.size()
     context.numRange = null
     context.networkIndex = 0
     context.rangeIndex = 0
}

if(context.networkIndex &lt; context.numNetworks)
{
     log.info("network data[" + context.networkIndex + "]: " + context.jsonSlurper.data[context.networkIndex])

     testRunner.testCase.setPropertyValue("networkId", context.jsonSlurper.data[context.networkIndex].id.toString())
     testRunner.testCase.setPropertyValue("networkName", context.jsonSlurper.data[context.networkIndex].name)
     testRunner.testCase.setPropertyValue("networkDescription", context.jsonSlurper.data[context.networkIndex].description)
     testRunner.testCase.setPropertyValue("networkType", context.jsonSlurper.data[context.networkIndex].type)
     testRunner.testCase.setPropertyValue("VLanId", context.jsonSlurper.data[context.networkIndex].vlanId.toString())
     testRunner.testCase.setPropertyValue("staticIPv4Network", context.jsonSlurper.data[context.networkIndex].static.toString())

     if("true" == testRunner.testCase.getPropertyValue("staticIPv4Network"))
     {
          testRunner.testCase.setPropertyValue("networkGateway", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.gateway)
          testRunner.testCase.setPropertyValue("networkSubnet", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.subnet)
          testRunner.testCase.setPropertyValue("networkDnsSuffix", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.dnsSuffix)
          testRunner.testCase.setPropertyValue("networkPrimaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.primaryDns)
          testRunner.testCase.setPropertyValue("networkSecondaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.secondaryDns)

          if(context.numRange == null)
          {
               context.numRange = context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange.id.size()
               log.info("context.numRange: " + context.numRange)
          }

          if(context.numRange > 0)
          {
               testRunner.testCase.setPropertyValue("RangeId", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].id.toString())
               log.info("rangeId: " + testRunner.testCase.getPropertyValue("RangeId"))
               testRunner.testCase.setPropertyValue("networkStartingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].startingIp)
               testRunner.testCase.setPropertyValue("networkEndingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].endingIp)     
//
// We want to return to this networkId to complete the parsing of the rangeId info
//
               if(++context.rangeIndex &lt; context.numRange)
                    --context.networkIndex

               log.info("Parse end for rangeIndex: " + context.rangeIndex)
               if(context.rangeIndex == context.numRange)
               {
                    context.numRange = null
                    context.rangeIndex = 0
               }
          }
     }
     log.info("Parse end for networkIndex: " + context.networkIndex)
     ++context.networkIndex
}
else
{
     context.numNetworks = null	
     testRunner.gotoStepByName("testEnd")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="readValidUpdateNetworkData - VLAN 4081" id="3e9fa396-d893-43b3-a4bc-bb9db892e4d7"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: validUpdateNetwork-400
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validUpdateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))

     context.loopIndex = 0
     context.saveNetworkId = testRunner.testCase.getPropertyValue("networkId")
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
     	staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readInvalidUpdateNetworkData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("testEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="updateNetwork - VLAN 4081" id="7665dde6-d74d-4ba2-91ff-84afbcd9af00">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateNetwork - VLAN 4081" id="7f3809ad-618a-4308-b62e-6bce71e3f162" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "id": ${#TestCase#networkId},
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="83c303bb-b7c6-4849-a3ae-de1df5691bce" name="Valid HTTP Status Codes">
							<con:configuration><codes>400
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="networkDescription" value="${#TestCase#networkDescription}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="staticIPV4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkGateway" value="${#TestCase#networGateway}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPV4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="returnToReadValidUpdateNetworkData -VLAN 4081" id="9f7727ce-997d-4b7d-a37d-17a883730a1b"><con:settings/><con:config><script>//
// Replacing conditional Goto test steps with a groovy script 
// that does the same thing. Easzier to read/understand this way.
//
testRunner.gotoStepByName("readValidUpdateNetworkData - VLAN 4081")
</script></con:config></con:testStep><con:testStep type="groovy" name="updateNetworkLoopEnd" id="4b96e07c-32e7-4517-8ec7-c972da963177"><con:settings/><con:config><script>//
// Replacing conditional Goto test steps with a groovy script 
// that does the same thing. Easzier to read/understand this way.
//
testRunner.gotoStepByName("parseGetAllNetworksInfo")
</script></con:config></con:testStep><con:testStep type="groovy" name="testEnd" id="39ee42be-1bd5-468c-aff0-09473a0adb6d"><con:settings/><con:config><script>//
// Name holder step.
//
</script></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>7b73c3fc-b1f5-4e7e-9959-e7508695ad4b</con:value></con:property><con:property><con:name>networkId</con:name><con:value>4544</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2"
          {
               "networkStartingIp": "72.162.0.90",
               "networkEndingIp": "72.162.0.92"
          }
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>originalNetworkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>originalNetworkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>originalNetworkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>originalVLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>2006</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiI2ZjgzMWIyNi1iN2JmLTQ3MWItODgwZi03YzY2Y2I3ZDYwYjkiLCJleHAiOjE0NzQ0ODE4MDAsIm5iZiI6MCwiaWF0IjoxNDc0NDgxNzQwLCJpc3MiOiJodHRwOi8vMTAwLjY4LjEyMy4xNzM6ODA4MS9hdXRoL3JlYWxtcy9zbWktbWljcm9zZXJ2aWNlcyIsImF1ZCI6InNvYXB1aS1jbGllbnQiLCJzdWIiOiIyODE2M2E2Yi04MWUzLTRhMGUtODdhNy1hMGJmNTljMjAyNjEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzb2FwdWktY2xpZW50IiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiYWRhY2ZjOTMtNjBmZC00YTlkLWIxYjMtOGNiM2U2MTRjYjhiIiwiYWNyIjoiMSIsImNsaWVudF9zZXNzaW9uIjoiYTljMmE4NzMtYmU5Yy00MmUyLWJjZTQtZjgyMTg1MWJjOGMzIiwiYWxsb3dlZC1vcmlnaW5zIjpbXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbInVtYV9hdXRob3JpemF0aW9uIiwiUk9MRV9XUklURSIsIlJPTEVfUkVBRCIsIlJPTEVfQ09ORklHVVJFX05FVFdPUksiXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50Iiwidmlldy1wcm9maWxlIl19fSwibmFtZSI6IiIsInByZWZlcnJlZF91c2VybmFtZSI6InVzZXIxIiwiZW1haWwiOiJtaWNoYWVsX2hlcGZlckBkZWxsLmNvbSJ9.jCKiih2LhbJ7hLADF7h_N-C7UDdup-aR77gGh2OizYn7vuIm1kbrW4gIxoiqmuvaZfMgFkoV8LyzSWhvf4blVr_RM9yNAxZQNokRjiE_J6qaorqGttufqOy5qnjOJqVh7Q09hqlY-q69fWfmwJDbdRIC4WNWViS8UVYt1aB9HyKKxwIuu9tfphQbZ7pkoeqaF39yJRWs5-VwPKV445dexsp_bQheV9iE9Y5ln-8s05pchdk7lBSqaepeohhIix7QBsMXQkNsQyKrzP17a3MHtUD8mO17SI7IC5F6Ne6Vne4RMiJHL6k0KoaXLltBJzFtttW2r3-Kp9Zkbu805p_tTA</con:value></con:property></con:properties></con:testCase><con:testCase id="76d50bb2-a80c-4ff4-999f-019aa710b2f5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidDeleteNetwork-400" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="da4298e1-2b3e-40b3-91df-003b212ac3d0">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="c81540a4-c566-4a86-ab4c-068d4c00709e">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="1f00e8b6-f46a-4b94-857e-f7951fe92cfe">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="parseGetAllNetworksInfo" id="c3592612-7e8c-4535-8d46-6468b14c12ab"><con:settings/><con:config><script>//
// This script will get the next networkId value as returned by the
// getAllNetworks test step.
//
import groovy.json.JsonSlurper

if(context.numNetworks == null)
{
     def responseMessage = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
     context.jsonSlurper = new JsonSlurper().parseText(responseMessage)
     log.info("raw network data: " + context.jsonSlurper.data)
     log.info("number of networks: " + context.jsonSlurper.data.size())

	log.info("setting up context variables")
     context.numNetworks = context.jsonSlurper.data.size()
     context.numRange = null
     context.networkIndex = 0
     context.rangeIndex = 0
}

if(context.networkIndex &lt; context.numNetworks)
{
     log.info("network data[" + context.networkIndex + "]: " + context.jsonSlurper.data[context.networkIndex])

     testRunner.testCase.setPropertyValue("networkId", context.jsonSlurper.data[context.networkIndex].id.toString())
     testRunner.testCase.setPropertyValue("networkName", context.jsonSlurper.data[context.networkIndex].name)
     testRunner.testCase.setPropertyValue("networkDescription", context.jsonSlurper.data[context.networkIndex].description)
     testRunner.testCase.setPropertyValue("networkType", context.jsonSlurper.data[context.networkIndex].type)
     testRunner.testCase.setPropertyValue("VLanId", context.jsonSlurper.data[context.networkIndex].vlanId.toString())
     testRunner.testCase.setPropertyValue("staticIPv4Network", context.jsonSlurper.data[context.networkIndex].static.toString())

     if("true" == testRunner.testCase.getPropertyValue("staticIPv4Network"))
     {
          testRunner.testCase.setPropertyValue("networkGateway", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.gateway)
          testRunner.testCase.setPropertyValue("networkSubnet", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.subnet)
          testRunner.testCase.setPropertyValue("networkDnsSuffix", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.dnsSuffix)
          testRunner.testCase.setPropertyValue("networkPrimaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.primaryDns)
          testRunner.testCase.setPropertyValue("networkSecondaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.secondaryDns)

          if(context.numRange == null)
          {
               context.numRange = context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange.id.size()
               log.info("context.numRange: " + context.numRange)
          }

          if(context.numRange > 0)
          {
               testRunner.testCase.setPropertyValue("RangeId", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].id.toString())
               log.info("rangeId: " + testRunner.testCase.getPropertyValue("RangeId"))
               testRunner.testCase.setPropertyValue("networkStartingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].startingIp)
               testRunner.testCase.setPropertyValue("networkEndingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].endingIp)     
//
// We want to return to this networkId to complete the parsing of the rangeId info
//
               if(++context.rangeIndex &lt; context.numRange)
                    --context.networkIndex

               log.info("Parse end for rangeIndex: " + context.rangeIndex)
               if(context.rangeIndex == context.numRange)
               {
                    context.numRange = null
                    context.rangeIndex = 0
               }
          }
     }
     log.info("Parse end for networkIndex: " + context.networkIndex)
     ++context.networkIndex
}
else
{
     context.numNetworks = null	
     testRunner.gotoStepByName("testEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="9181fa5d-8b0c-446a-988a-4c0df0dbbc6e">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration><codes>400
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="returnToParseGetAllNetworksInfo" id="10ef7dce-42c3-4ef7-af41-904a8513a6dd"><con:settings/><con:config><script>//
// Replacing conditional Goto test steps with a groovy script 
// that does the same thing. Easzier to read/understand this way.
//
testRunner.gotoStepByName("parseGetAllNetworksInfo")
</script></con:config></con:testStep><con:testStep type="groovy" name="testEnd" id="4101c2be-4b38-402e-9c46-fb3d1c5a11f5"><con:settings/><con:config><script>//
//
//
</script></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>b6e7ec23-c059-4272-98a1-88f4fabc56ae</con:value></con:property><con:property><con:name>networkId</con:name><con:value>4544</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>4545</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJhNTNkNTg1ZC00M2MyLTRkYTgtOTgxZC1hMzkxMWFhY2QwZGIiLCJleHAiOjE0NzUxNjAwNzAsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDEwLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjY3NjQ2ODg1LTgwNDAtNGJhZS04NDhmLWJkN2U3YTdhMzlhOSIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6ImFiMTgzMDNkLTgyZDktNDU2ZC1hMmFiLWVhMDI5ZTljMjU0YiIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.YsKgUkJAleS-dVcuAnKhjgiNL_s6lv_Xd1czfe6cHHIOzdrPk1kOYPJ2tLAoDth4Sa8-2ATasJSCb0aygQhPLEmlXHgTbgk-wI7duALZEmXFXIcWL_wMzt-LK6Qtuvzc8JTM-mRZ1FyZMLEeMBsVJtvoZfRJPaXAE5DaeXgch-4e5tKu2rkjo6aeHFG4zgA366hMYIgrTbLz2MwzyLR8EYJ0yTVRkTz4IPxoanxI_xs4SieTtedzxslPoWH_rvFVONhesA8hnP5cvk_95nyL3YgZ6xv_OpUys5XSN9_kckKFsUMnVYKzkiB9STdFPYsMCA1qTaCJmAuxam7xeM8vSQ</con:value></con:property></con:properties></con:testCase><con:testCase id="0822fefd-1812-4665-a653-144b65c26d68" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidAddIPv4Range-400" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="4a0c20f3-b4fa-4ad0-89ec-17f70c1e7b1c">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="7a84e32c-e6e6-4216-a2ef-0702c275ffdf">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="35e4cae3-8eca-45c2-8905-21b533a9b5fe"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
          if((propData.size() > 10) &amp;&amp; !(propData.size() % 2))
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
          }     
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
          index = 10
          while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
          {
          	testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '          {\n'
          	staticNetworkBody = staticNetworkBody + '               "networkStartingIp": ' + '"' + propData[index++] + '",\n'      
     	     testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '               "networkEndingIp": ' + '"' + propData[index++] + '"\n'

               if( propData.size() > index)
          	     staticNetworkBody = staticNetworkBody + '          },\n'
               else
          	     staticNetworkBody = staticNetworkBody + '          }\n'
          	
          	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          }
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="b6265000-c1d4-47b1-804a-a31f69541d28">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     "static": ${#TestCase#staticIPv4Network},
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "${#TestCase#networkGateway}",
          "subnet": "${#TestCase#networkSubnet}",
          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
          "primaryDns": "${#TestCase#networkPrimaryIp}",
          "secondaryDns": "${#TestCase#networkSecondaryIp}",
          "ipRange":
          [
               {
                    "startingIp": "${#TestCase#networkStartingIp}",
                    "endingIp": "${#TestCase#networkEndingIp}"
               }
          ]
     }
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkEndingIp" value="${#TestCase#networkEndingIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkStartingIp" value="${#TestCase#networkStartingIp}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="06ab1661-01ee-47fc-9cd9-7e3910bc201b"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="groovy" name="readInvalidAddIPv4RangeData" id="db6c5f33-40ef-4706-a940-d57cea4eb7fa"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidAddIPv4Range-400
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidAddIPv4RangeData.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))

     context.loopIndex = 0
}

testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")
     String[] propData = testSetupLine.split(",")

     testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
     if( propData.size() == 1)
     	testRunner.testCase.setPropertyValue("networkAddEndingIP", null)
     else
          testRunner.testCase.setPropertyValue("networkAddEndingIp", propData[1])

//log.info(propData[0])
     log.info("Leaving readInvalidAddIPv4RangeData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("deleteNetwork")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="addIPV4Range" id="472fd948-036b-4f65-8343-f4b59186f3da">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="addIPV4Range" id="f8f2c315-2eb3-4293-a8a6-30dd1ddbf079" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "startingIp": "${#TestCase#networkAddStartingIp}",
     "endingIp": "${#TestCase#networkAddEndingIp}"
}

						</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="81f3a7a9-33e8-4139-82db-3213ab4866e0" name="Valid HTTP Status Codes">
							<con:configuration><codes>400
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkAddStartingIp" value="${#TestCase#networkAddStartingIp}"/>
  <con:entry key="networkAddEndingIp" value="${#TestCase#networkAddEndingIp}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="getNetwork" id="b156902c-0ffe-4ae6-8223-fb46134bfdca">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyNetworkInfo" id="a0137b66-22c5-44b5-8c95-3beb51afb86d"><con:settings/><con:config><script>//
// This groovy script will verify that the Get Network API returns the smae
// information about a network with networkId as was entered whent he network
// was created via the Create Network API.
//
// Currently, it only verifies string data, not integer or boolean.
//
import groovy.json.JsonSlurper

def responseMessage = testRunner.testCase.getTestStepByName("getNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(responseMessage)


//testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//jsonSlurper.static.toString()
assert jsonSlurper.static.toString() == testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//def jsonSlurper1 = JsonSlurper().parseText(jsonSlurper.staticIpv4NetworkConfiguration)
//jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].startingIp
//jsonSlurper.vlanId
//testRunner.testCase.getPropertyValue("VLanId")
assert jsonSlurper.vlanId.toString() == testRunner.testCase.getPropertyValue("VLanId").toString()
assert jsonSlurper.name == testRunner.testCase.getPropertyValue("networkName")
assert jsonSlurper.description == testRunner.testCase.getPropertyValue("networkDescription")
assert jsonSlurper.type == testRunner.testCase.getPropertyValue("networkType")
assert jsonSlurper.staticIpv4NetworkConfiguration.gateway == testRunner.testCase.getPropertyValue("networkGateway")
assert jsonSlurper.staticIpv4NetworkConfiguration.subnet == testRunner.testCase.getPropertyValue("networkSubnet")
assert jsonSlurper.staticIpv4NetworkConfiguration.primaryDns == testRunner.testCase.getPropertyValue("networkPrimaryIp")
assert jsonSlurper.staticIpv4NetworkConfiguration.secondaryDns == testRunner.testCase.getPropertyValue("networkSecondaryIp")
assert jsonSlurper.staticIpv4NetworkConfiguration.dnsSuffix == testRunner.testCase.getPropertyValue("networkDnsSuffix")

if(jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].id.toString() == testRunner.testCase.getPropertyValue("networkDnsSuffix"))
{
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].startingIp == testRunner.testCase.getPropertyValue("networkStartingIp")
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].endingIp == testRunner.testCase.getPropertyValue("networkEndingIp")
}
jsonSlurper.staticIpv4NetworkConfiguration.ipRange.id
</script></con:config></con:testStep><con:testStep type="goto" name="returnToReadInvalidAddIPv4RangeData" id="55f3873f-d2e9-4ab7-852f-49548247f7e5"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()
</con:expression><con:targetStep>readInvalidAddIPv4RangeData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="6da5066f-c8ae-4386-806f-9b12543c13f5">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="0f49ed51-c6cd-4399-bfe0-174c7b23844d">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="parseGetAllNetworksInfo" id="67e411e4-ceb5-4b91-a297-ec1635f18bf7"><con:settings/><con:config><script>//
// This script will get the next networkId value as returned by the
// getAllNetworks test step.
//
import groovy.json.JsonSlurper

if(context.numNetworks == null)
{
     def responseMessage = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
     context.jsonSlurper = new JsonSlurper().parseText(responseMessage)
     log.info("raw network data: " + context.jsonSlurper.data)
     log.info("number of networks: " + context.jsonSlurper.data.size())

	log.info("setting up context variables")
     context.numNetworks = context.jsonSlurper.data.size()
     context.numRange = null
     context.networkIndex = 0
     context.rangeIndex = 0
}

if(context.networkIndex &lt; context.numNetworks)
{
     log.info("network data[" + context.networkIndex + "]: " + context.jsonSlurper.data[context.networkIndex])

     testRunner.testCase.setPropertyValue("networkId", context.jsonSlurper.data[context.networkIndex].id.toString())
     testRunner.testCase.setPropertyValue("networkName", context.jsonSlurper.data[context.networkIndex].name)
     testRunner.testCase.setPropertyValue("networkDescription", context.jsonSlurper.data[context.networkIndex].description)
     testRunner.testCase.setPropertyValue("networkType", context.jsonSlurper.data[context.networkIndex].type)
     testRunner.testCase.setPropertyValue("VLanId", context.jsonSlurper.data[context.networkIndex].vlanId.toString())
     testRunner.testCase.setPropertyValue("staticIPv4Network", context.jsonSlurper.data[context.networkIndex].static.toString())

     if("true" == testRunner.testCase.getPropertyValue("staticIPv4Network"))
     {
          testRunner.testCase.setPropertyValue("networkGateway", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.gateway)
          testRunner.testCase.setPropertyValue("networkSubnet", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.subnet)
          testRunner.testCase.setPropertyValue("networkDnsSuffix", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.dnsSuffix)
          testRunner.testCase.setPropertyValue("networkPrimaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.primaryDns)
          testRunner.testCase.setPropertyValue("networkSecondaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.secondaryDns)

          if(context.numRange == null)
          {
               context.numRange = context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange.id.size()
               log.info("context.numRange: " + context.numRange)
          }

          if(context.numRange > 0)
          {
               testRunner.testCase.setPropertyValue("RangeId", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].id.toString())
               log.info("rangeId: " + testRunner.testCase.getPropertyValue("RangeId"))
               testRunner.testCase.setPropertyValue("networkStartingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].startingIp)
               testRunner.testCase.setPropertyValue("networkEndingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].endingIp)     
//
// We want to return to this networkId to complete the parsing of the rangeId info
//
               if(++context.rangeIndex &lt; context.numRange)
                    --context.networkIndex

               log.info("Parse end for rangeIndex: " + context.rangeIndex)
               if(context.rangeIndex == context.numRange)
               {
                    context.numRange = null
                    context.rangeIndex = 0
               }
          }
     }
     log.info("Parse end for networkIndex: " + context.networkIndex)
     ++context.networkIndex
}
else
{
     context.numNetworks = null	
     testRunner.gotoStepByName("testEnd")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="readInvalidAddIPv4RangeData - VLAN 4081" id="567564d1-9de4-4dcf-ac7f-6476cf017206"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidAddIPv4Range-400
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidAddIPv4RangeData.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))

     context.loopIndex = 0
}

testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")
     String[] propData = testSetupLine.split(",")

     testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
     testRunner.testCase.setPropertyValue("networkAddEndingIp", propData[1])

//log.info(propData[0])
     log.info("Leaving readInvalidAddIPv4RangeData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("deleteNetwork")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="addIPV4Range - VLAN 4081" id="50cad3b4-9cbe-4b11-8e28-98cb6d3f1d7d">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="addIPV4Range - VLAN 4081" id="f8f2c315-2eb3-4293-a8a6-30dd1ddbf079" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "startingIp": "${#TestCase#networkAddStartingIp}",
     "endingIp": "${#TestCase#networkAddEndingIp}"
}

						</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="81f3a7a9-33e8-4139-82db-3213ab4866e0" name="Valid HTTP Status Codes">
							<con:configuration><codes>400
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkAddStartingIp" value="${#TestCase#networkAddStartingIp}"/>
  <con:entry key="networkAddEndingIp" value="${#TestCase#networkAddEndingIp}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="getNetwork - VLAN 4081" id="4f064ad2-450d-47d0-b4a2-aca204f6ac05">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork - VLAN 4081" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyNetworkInfo - VLAN 4081" id="5aa33167-63cb-43ee-950e-3029f7adaae0"><con:settings/><con:config><script>//
// This groovy script will verify that the Get Network API returns the smae
// information about a network with networkId as was entered whent he network
// was created via the Create Network API.
//
// Currently, it only verifies string data, not integer or boolean.
//
import groovy.json.JsonSlurper

def responseMessage = testRunner.testCase.getTestStepByName("getNetwork - VLAN 4081").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(responseMessage)


//testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//jsonSlurper.static.toString()
assert jsonSlurper.static.toString() == testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//def jsonSlurper1 = JsonSlurper().parseText(jsonSlurper.staticIpv4NetworkConfiguration)
//jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].startingIp
//jsonSlurper.vlanId
//testRunner.testCase.getPropertyValue("VLanId")
assert jsonSlurper.vlanId.toString() == testRunner.testCase.getPropertyValue("VLanId").toString()
assert jsonSlurper.name == testRunner.testCase.getPropertyValue("networkName")
assert jsonSlurper.description == testRunner.testCase.getPropertyValue("networkDescription")
assert jsonSlurper.type == testRunner.testCase.getPropertyValue("networkType")
assert jsonSlurper.staticIpv4NetworkConfiguration.gateway == testRunner.testCase.getPropertyValue("networkGateway")
assert jsonSlurper.staticIpv4NetworkConfiguration.subnet == testRunner.testCase.getPropertyValue("networkSubnet")
assert jsonSlurper.staticIpv4NetworkConfiguration.primaryDns == testRunner.testCase.getPropertyValue("networkPrimaryDns")
assert jsonSlurper.staticIpv4NetworkConfiguration.secondaryDns == testRunner.testCase.getPropertyValue("networkSecondaryDns")
assert jsonSlurper.staticIpv4NetworkConfiguration.dnsSuffix == testRunner.testCase.getPropertyValue("networkDnsSuffix")

if(jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].id.toString() == testRunner.testCase.getPropertyValue("networkDnsSuffix"))
{
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].startingIp == testRunner.testCase.getPropertyValue("networkStartingIp")
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].endingIp == testRunner.testCase.getPropertyValue("networkEndingIp")
}
jsonSlurper.staticIpv4NetworkConfiguration.ipRange.id
</script></con:config></con:testStep><con:testStep type="groovy" name="returnToReadInvalidAddIPv4RangeData - VLAN 4081" id="1ef43a78-08e4-4952-93e3-ca61785ae7e6"><con:settings/><con:config><script>//
// Replacing conditional Goto test steps with a groovy script 
// that does the same thing. Easzier to read/understand this way.
//
testRunner.gotoStepByName("readInvalidAddIPv4RandeData - VLAN 4081")
</script></con:config></con:testStep><con:testStep type="groovy" name="returnToParseGetAllNetworksInfo" id="016c6c43-aa91-4b0a-992f-ede081fc0687"><con:settings/><con:config><script>//
// Replacing conditional Goto test steps with a groovy script 
// that does the same thing. Easzier to read/understand this way.
//
testRunner.gotoStepByName("parseGetAllNetworksInfo")
</script></con:config></con:testStep><con:testStep type="groovy" name="testEnd" id="f04e99a2-7578-457c-a199-175559f540ce"><con:settings/><con:config><script>//
//
//
</script></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>8b86b913-3457-4325-8a9c-38b76bb2b1dd</con:value></con:property><con:property><con:name>networkId</con:name><con:value>25294</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>ipv4RangeId</con:name><con:value>[539]</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>1074</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>ff.162.0.1</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value>72.162.0.89</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2"
          {
               "networkStartingIp": "72.162.0.90",
               "networkEndingIp": "72.162.0.92"
          }
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>networkingAddEndingIP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJkNmRmNGYwMi05ZDQxLTQ4NTgtYTA1MC03ODUwNTJlYWQ4MjYiLCJleHAiOjE0NzUxNjAwNzAsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDEwLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjhmZWRjNzk2LTI0MGQtNGRmNS1hNjRiLWI5NTY2YTc4ODlhNyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6ImNhOGI5NTYzLTY5YmEtNGI5NC05OWI0LWYzNDgwM2JjMTQ5YiIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.jiGjOcPMf-TDnIM0R0BTZtkfrh3uZ-zv3nt8Hm7-z5yEXMRxEvGdcnEjw_8QPPav3_P20-ao7KnAw5ul1MLdod3amID5ciorSIArgf9P5F3dOq7a-MhtJkzSaMKqn1AEN3-DX0C3LnIKyizSXg0nFmNRd2hlsmXE6r1SJJLCPcl0M8SW_2se5AgrF1UQnf1OCXgkM01fPBp0JOXFxHaHdeYp_R-88yT_Cyf1oPtTrfkI6r8Ccv9i_eZT9UZeLKqQ2nnme1mLdNwMfik9p__w0rPTnMDwxaCKsA-QIkcVTVtWMpvoUcQGsk2_icxUE1ryORrvk0PBjB0qePj1kq5npA</con:value></con:property></con:properties></con:testCase><con:testCase id="7290a52b-004f-4320-9a98-d6613ad7c00b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidUpdateIPv4Range-400" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="75179351-0484-4e05-b168-f67fb3c44c21">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="ffd27a13-2a13-4473-8684-4d94b4dfdc31">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="f973afc1-9d5e-4fd0-9547-c3895e1e5649"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
          if((propData.size() > 10) &amp;&amp; !(propData.size() % 2))
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
          }     
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
          index = 10
          while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
          {
          	testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '          {\n'
          	staticNetworkBody = staticNetworkBody + '               "networkStartingIp": ' + '"' + propData[index++] + '",\n'      
     	     testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '               "networkEndingIp": ' + '"' + propData[index++] + '"\n'

               if( propData.size() > index)
          	     staticNetworkBody = staticNetworkBody + '          },\n'
               else
          	     staticNetworkBody = staticNetworkBody + '          }\n'
          	
          	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          }
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="ec2fbc5b-2531-4bdf-b291-a334d3f99f9a">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:8080</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     "static": ${#TestCase#staticIPv4Network},
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "${#TestCase#networkGateway}",
          "subnet": "${#TestCase#networkSubnet}",
          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
          "primaryDns": "${#TestCase#networkPrimaryIp}",
          "secondaryDns": "${#TestCase#networkSecondaryIp}",
          "ipRange":
          [
               {
                    "startingIp": "${#TestCase#networkStartingIp}",
                    "endingIp": "${#TestCase#networkEndingIp}"
               }
          ]
     }
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="a0a6676e-b4e7-4003-bc1f-cacc73540112"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="4606a250-2477-4ef0-9049-1561920279e6">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:8080</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="parseGetAllNetworksInfo" id="ac7acd5e-2f6b-413e-a273-e9205de2fbeb"><con:settings/><con:config><script>//
// This script will get the next networkId value as returned by the
// getAllNetworks test step.
//
import groovy.json.JsonSlurper

if(context.numNetworks == null)
{
     def responseMessage = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
     context.jsonSlurper = new JsonSlurper().parseText(responseMessage)
     log.info("raw network data: " + context.jsonSlurper.data)
     log.info("number of networks: " + context.jsonSlurper.data.size())

	log.info("setting up context variables")
     context.numNetworks = context.jsonSlurper.data.size()
     context.numRange = null
     context.networkIndex = 0
     context.rangeIndex = 0
}

if(context.networkIndex &lt; context.numNetworks)
{
     log.info("network data[" + context.networkIndex + "]: " + context.jsonSlurper.data[context.networkIndex])

     testRunner.testCase.setPropertyValue("networkId", context.jsonSlurper.data[context.networkIndex].id.toString())
     testRunner.testCase.setPropertyValue("networkName", context.jsonSlurper.data[context.networkIndex].name)
     testRunner.testCase.setPropertyValue("networkDescription", context.jsonSlurper.data[context.networkIndex].description)
     testRunner.testCase.setPropertyValue("networkType", context.jsonSlurper.data[context.networkIndex].type)
     testRunner.testCase.setPropertyValue("VLanId", context.jsonSlurper.data[context.networkIndex].vlanId.toString())
     testRunner.testCase.setPropertyValue("staticIPv4Network", context.jsonSlurper.data[context.networkIndex].static.toString())

     if("true" == testRunner.testCase.getPropertyValue("staticIPv4Network"))
     {
          testRunner.testCase.setPropertyValue("networkGateway", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.gateway)
          testRunner.testCase.setPropertyValue("networkSubnet", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.subnet)
          testRunner.testCase.setPropertyValue("networkDnsSuffix", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.dnsSuffix)
          testRunner.testCase.setPropertyValue("networkPrimaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.primaryDns)
          testRunner.testCase.setPropertyValue("networkSecondaryDns", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.secondaryDns)

          if(context.numRange == null)
          {
               context.numRange = context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange.id.size()
               log.info("context.numRange: " + context.numRange)
          }

          if(context.numRange > 0)
          {
               testRunner.testCase.setPropertyValue("RangeId", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].id.toString())
               log.info("rangeId: " + testRunner.testCase.getPropertyValue("RangeId"))
               testRunner.testCase.setPropertyValue("networkStartingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].startingIp)
               testRunner.testCase.setPropertyValue("networkEndingIp", context.jsonSlurper.data[context.networkIndex].staticIpv4NetworkConfiguration.ipRange[context.rangeIndex].endingIp)     
//
// We want to return to this networkId to complete the parsing of the rangeId info
//
               if(++context.rangeIndex &lt; context.numRange)
                    --context.networkIndex

               log.info("Parse end for rangeIndex: " + context.rangeIndex)
               if(context.rangeIndex == context.numRange)
               {
                    context.numRange = null
                    context.rangeIndex = 0
               }
          }
     }
     log.info("Parse end for networkIndex: " + context.networkIndex)
     ++context.networkIndex
}
else
{
     context.numNetworks = null	
     testRunner.gotoStepByName("deleteNetwork")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="GetIPv4RangeId" id="6478f5eb-7ab2-41d4-86e9-7ed2bfca969b" disabled="true"><con:settings/><con:config><script>//
// This script will harvest the first range ID obtained by calling the
// getAllNetworks test step.
//
// Access this network ID using: ${#TestCase#RangeId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)

testRunner.testCase.setPropertyValue("RangeId", slurpResponse.data[0].staticIpv4NetworkConfiguration.ipRange.id[0].toString())
log.info(slurpResponse.data[0].staticIpv4NetworkConfiguration.ipRange.id[0].toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="readInvalidUpdateIPv4RangeData" id="3a677c59-97dd-4755-b9cf-8de909eb58a4"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidUpdateIPv4Range-400
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidAddIPv4RangeData.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")
     String[] propData = testSetupLine.split(",")

     testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
     if( propData.size() == 1)
     	testRunner.testCase.setPropertyValue("networkAddEndingIP", null)
     else
          testRunner.testCase.setPropertyValue("networkAddEndingIp", propData[1])

     log.info("Leaving readInvalidUpdateIPv4RangeData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("returnToParseGetAllNetworksInfo")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="updateIPV4Range" id="a6f0ad9b-03c4-4431-b350-efa2e17cf1a6">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/{rangeId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateIPV4Range" id="83fe57c0-1bad-45be-ae91-430707ec4473" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:8080</con:endpoint>
						<con:request>{
     "id": ${#TestCase#RangeId},
     "startingIp": "${#TestCase#networkAddStartingIp}",
     "endingIp": "${#TestCase#networkAddEndingIp}"
}
						</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9dcd46af-d776-4422-aa0c-761ad6096b4f" name="Valid HTTP Status Codes">
							<con:configuration><codes>400

								</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="rangeId" value="${#TestCase#RangeId}"/>
  <con:entry key="networkStartingIp" value="${#TestCase#networkStartingIp}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkEndingIp" value="${#TestCase#networkEndingIp}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>rangeId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="restrequest" name="getNetwork" id="1b8b6750-1558-438d-af8f-8e34e0da1209">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:8080</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyNetworkInfo" id="dfeffa9e-bee7-410a-acbd-f7eb9b22b274"><con:settings/><con:config><script>//
// This groovy script will verify that the Get Network API returns the smae
// information about a network with networkId as was entered whent he network
// was created via the Create Network API.
//
// Currently, it only verifies string data, not integer or boolean.
//
import groovy.json.JsonSlurper

def responseMessage = testRunner.testCase.getTestStepByName("getNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(responseMessage)


//testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//jsonSlurper.static.toString()
assert jsonSlurper.static.toString() == testRunner.testCase.getPropertyValue("staticIPv4Network").toString()
//def jsonSlurper1 = JsonSlurper().parseText(jsonSlurper.staticIpv4NetworkConfiguration)
//jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].startingIp
//jsonSlurper.vlanId
//testRunner.testCase.getPropertyValue("VLanId")
assert jsonSlurper.vlanId.toString() == testRunner.testCase.getPropertyValue("VLanId").toString()
assert jsonSlurper.name == testRunner.testCase.getPropertyValue("networkName")
assert jsonSlurper.description == testRunner.testCase.getPropertyValue("networkDescription")
assert jsonSlurper.type == testRunner.testCase.getPropertyValue("networkType")
assert jsonSlurper.staticIpv4NetworkConfiguration.gateway == testRunner.testCase.getPropertyValue("networkGateway")
assert jsonSlurper.staticIpv4NetworkConfiguration.subnet == testRunner.testCase.getPropertyValue("networkSubnet")
assert jsonSlurper.staticIpv4NetworkConfiguration.primaryDns == testRunner.testCase.getPropertyValue("networkPrimaryDns")
assert jsonSlurper.staticIpv4NetworkConfiguration.secondaryDns == testRunner.testCase.getPropertyValue("networkSecondaryDns")
assert jsonSlurper.staticIpv4NetworkConfiguration.dnsSuffix == testRunner.testCase.getPropertyValue("networkDnsSuffix")

if(jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].id.toString() == testRunner.testCase.getPropertyValue("networkDnsSuffix"))
{
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].startingIp == testRunner.testCase.getPropertyValue("networkStartingIp")
     assert jsonSlurper.staticIpv4NetworkConfiguration.ipRange[0].endingIp == testRunner.testCase.getPropertyValue("networkEndingIp")
}
jsonSlurper.staticIpv4NetworkConfiguration.ipRange.id
</script></con:config></con:testStep><con:testStep type="groovy" name="returnToReadInvalidAddIPv4RangeData" id="3d4943b1-9d7e-45a9-b8b7-c7f24f322ddd"><con:settings/><con:config><script>//
// Replacing conditional Goto test steps with a groovy script 
// that does the same thing. Easzier to read/understand this way.
//
testRunner.gotoStepByName("readInvalidAddIPv4RandeData - VLAN 4081")
</script></con:config></con:testStep><con:testStep type="groovy" name="returnToParseGetAllNetworksInfo" id="a7ca910a-7514-457b-b499-12143f73a890"><con:settings/><con:config><script>//
// Replacing conditional Goto test steps with a groovy script 
// that does the same thing. Easzier to read/understand this way.
//
testRunner.gotoStepByName("parseGetAllNetworksInfo")
</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="0599345d-18fb-4006-bf28-f43da6940fa4">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:8080</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>8846157c-92bb-4fcc-bee1-1e234fd1b753</con:value></con:property><con:property><con:name>networkId</con:name><con:value>2280</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>ipv4RangeId</con:name><con:value>[539]</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>2281</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2"
          {
               "networkStartingIp": "72.162.0.90",
               "networkEndingIp": "72.162.0.92"
          }
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>72.162.10.1</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">72.162.10.90</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiI2NDMzNTEwNS0zNWE4LTQzYTktOTYzYy1lZjk5NmJjODcxYmIiLCJleHAiOjE0NzUxNjAwNzEsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDExLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjA3OWE3ODMyLWQwODEtNGVkNi1hOWU1LWRmYTg0OTJlNzgyNyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjUxYTZkZmQ4LTg3YjQtNDAwMi1iYjhkLTViNWY3NWQ5MDkzMiIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.bbVM_RsCFQg5EHpJGLC2rLMmlZCJfLlJETnNGJHJgA8ugkTQO8-jYjG0oGRTJRw3iXcn_CJq2SV5tRU3Tga0XX3fe-XXdytce9SLMSZ0yW4NL-fxUnRimA1hrYCVuc6i9ncJqgRF0V35jBI3zNO-a9JfyGIpPhjPJ4aQAMaKnvudDzsb5IBrLOTzTVbdP9mu83Twikez1OtfRhmZF-UGXAdzNiprkH9cQJFAXGOPyJLDRB0zRr-diG09YvBlCp9EFPGBUmUDTMIOCbRcVr8AcK5HYZ7BRmj1vTXo0SB9g2P_PcjRm3kvr6SY2dIb_bP3R2I8Jqdz94gyjUYhPURIEw</con:value></con:property></con:properties></con:testCase><con:testCase id="bed063a6-cd30-4861-9e70-a4f3bf9737bd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidDeleteIPv4Range-404" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="9748a7a7-5a31-40ee-a818-e94a347162e5">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="600b228f-cc39-41dc-9737-9ef96379f07f">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="14091e3f-4ede-49bb-b250-68306ecba2f8"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
          if((propData.size() > 10) &amp;&amp; !(propData.size() % 2))
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
          }     
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
          index = 10
          while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
          {
          	testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '          {\n'
          	staticNetworkBody = staticNetworkBody + '               "networkStartingIp": ' + '"' + propData[index++] + '",\n'      
     	     testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '               "networkEndingIp": ' + '"' + propData[index++] + '"\n'

               if( propData.size() > index)
          	     staticNetworkBody = staticNetworkBody + '          },\n'
               else
          	     staticNetworkBody = staticNetworkBody + '          }\n'
          	
          	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          }
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="f0243b7a-20b7-49be-9bb7-cf9b1c11130b">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     "static": ${#TestCase#staticIPv4Network},
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "${#TestCase#networkGateway}",
          "subnet": "${#TestCase#networkSubnet}",
          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
          "primaryDns": "${#TestCase#networkPrimaryIp}",
          "secondaryDns": "${#TestCase#networkSecondaryIp}",
          "ipRange":
          [
               {
                    "startingIp": "${#TestCase#networkStartingIp}",
                    "endingIp": "${#TestCase#networkEndingIp}"
               }
          ]
     }
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="5ab6e48d-5465-49c7-a832-714a214310c5"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="13c35638-f5c1-42a7-a0d0-49472ee5b4e4">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetIPv4RangeId" id="0cfdb540-caf5-4448-9fd9-449f392f97dc"><con:settings/><con:config><script>//
// This script will harvest the first range ID obtained by calling the
// getAllNetworks test step.
//
// Access this network ID using: ${#TestCase#RangeId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)

testRunner.testCase.setPropertyValue("RangeId", slurpResponse.data[0].staticIpv4NetworkConfiguration.ipRange.id[0].toString())
log.info(slurpResponse.data[0].staticIpv4NetworkConfiguration.ipRange.id[0].toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="createInvalid404Error" id="c12f24e8-9364-4d8e-85cb-ea624d32a780">
				<con:settings/>
				<con:config><script>//
// This script will save the networkId and RangeId values generated by Create
// Network and Get All Networks, respectively. It will then set each variable
// to "" (empty string) during each loop, and restore the networkId when the
// RangeId variable is set to the empty string.
//

if(context.loopIndex == null)
{
     context.loopIndex = 0
     context.saveRangeId = testRunner.testCase.getPropertyValue("RangeId")
     context.saveNetworkId = testRunner.testCase.getPropertyValue("networkId")
     log.info(" We are in if(context.loopIndex == null) loop ")
     log.info(context.saveRangeId)
     log.info(context.saveNetworkId)
}

if(context.loopIndex == 0)
{
     testRunner.testCase.setPropertyValue("networkId", "")
     log.info(" We are in if(context.loopIndex == 0) loop ")
	log.info(context.loopIndex)
	log.info(testRunner.testCase.getPropertyValue("networkId"))
	log.info(testRunner.testCase.getPropertyValue("RangeId"))
}
if(context.loopIndex == 1)
{
	testRunner.testCase.setPropertyValue("networkId", context.saveNetworkId)
     testRunner.testCase.setPropertyValue("RangeId", "")
    	log.info(" We are in if(context.loopIndex == 1) loop ")
	log.info(context.loopIndex)
	log.info(testRunner.testCase.getPropertyValue("networkId"))
	log.info(testRunner.testCase.getPropertyValue("RangeId"))
}

if(++context.loopIndex == 3)
{
	testRunner.gotoStepByName("loopDone")
	log.info(" We are in if(++context.loopIndex == 3) loop ")
	log.info(context.loopIndex)
	log.info(testRunner.testCase.getPropertyValue("networkId"))
	log.info(testRunner.testCase.getPropertyValue("RangeId"))
}

</script></con:config>
			</con:testStep><con:testStep type="restrequest" name="deleteIPV4Range" id="7ff99bc5-9e90-4231-994a-119ba1e9c577">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/{rangeId}" methodName="DeleteIPV4Range Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteIPV4Range" id="83fe57c0-1bad-45be-ae91-430707ec4473" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bcfeb5b7-7739-47b2-8f29-93968666ec44" name="Valid HTTP Status Codes">
							<con:configuration><codes>404,405

</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="rangeId" value="${#TestCase#RangeId}"/>
  <con:entry key="networkId" value="${#TestCase#networkId}"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="loopToCreateInvalid404Error" id="e3f2c546-95f7-467b-9eb0-f1b872b25606"><con:settings/><con:config><script>testRunner.gotoStepByName( "createInvalid404Error")</script></con:config></con:testStep><con:testStep type="delay" name="loopDone" id="4acbab7a-de5b-4819-af43-ce8da3379be9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="43472e18-108c-453a-be86-1b57ac3ddf16">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>0162013d-7384-43bc-8818-96839ff675d5</con:value></con:property><con:property><con:name>networkId</con:name><con:value>25299</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>72.162.10.90</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value>72.162.10.92</con:value></con:property><con:property><con:name>RangeId</con:name><con:value/></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2"
          {
               "networkStartingIp": "72.162.0.90",
               "networkEndingIp": "72.162.0.92"
          }
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiI3NjM5ZjY0MC0zOGI2LTRjN2EtOWNlMy04ZDgwOTgzOGE0Y2UiLCJleHAiOjE0NzUxNjAwNzMsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDEzLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImRmNTM1YjIwLTFlZWQtNGIwYy04NjZlLWQxOWJiZGQzM2ZkOSIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjBmOWM3YzE1LThjMWQtNGQ1OS1hNTQ4LTE2YjAyY2Q5ODM4ZiIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.CnkQV9W8azRkhNeGGbtZ-pUgg7iQyiUsUIuH1LTmd2bfU64BqmAKOywszEfLBsGJ0HYnfbMIKAqY2ge5xLg2ldBU_hItIBFDybn2rY9Q9npRjVcSbw1vGFYpVcRCQzo_F7kqHzKfug9WUQyTXRiBxotl9x1dB1cxzav8LaOyzCVUHpYzqSF5-uwtO_xn_xWDTGGPMQ0STfAcoiLKVvEK2aNS82Er4_HsQkf0PNRrcKETbjagbSa-y4axzaEMg6z4Sy_prvdI8b7_-A0WODH4LRlTowYl2e21nUnXrPMEnpEPg2qxxYTAfDazMwNwK8UkS1Qjp3xLmqy50cCJyR8ZAw</con:value></con:property></con:properties></con:testCase><con:testCase id="1f05e953-5e5c-457c-9fa5-f61da5cdc950" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidGetNetwork-404" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="4d2bcd68-a960-4123-9687-853bc643d348">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="07b54193-14b2-4f9a-ba79-e0fb31e1a633">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="3cfd237c-0d11-424c-9623-5ca861fe81ae"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
          if((propData.size() > 10) &amp;&amp; !(propData.size() % 2))
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
          }     
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
          index = 10
          while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
          {
          	testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '          {\n'
          	staticNetworkBody = staticNetworkBody + '               "networkStartingIp": ' + '"' + propData[index++] + '",\n'      
     	     testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '               "networkEndingIp": ' + '"' + propData[index++] + '"\n'

               if( propData.size() > index)
          	     staticNetworkBody = staticNetworkBody + '          },\n'
               else
          	     staticNetworkBody = staticNetworkBody + '          }\n'
          	
          	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          }
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="d2541429-dcff-44bd-9153-1f21acbf8920">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     "static": ${#TestCase#staticIPv4Network},
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "${#TestCase#networkGateway}",
          "subnet": "${#TestCase#networkSubnet}",
          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
          "primaryDns": "${#TestCase#networkPrimaryIp}",
          "secondaryDns": "${#TestCase#networkSecondaryIp}",
          "ipRange":
          [
               {
                    "startingIp": "${#TestCase#networkStartingIp}",
                    "endingIp": "${#TestCase#networkEndingIp}"
               }
          ]
     }
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="createInvalidNetworkId" id="7a7ee854-7151-4e5f-a29e-933d83847484"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidGetNetwork-404
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//
import groovy.json.JsonSlurper

if(context.loopIndex == null)
{
     context.loopIndex = 0
     def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
	def jsonSlurper = new JsonSlurper().parseText(rawResponse)
	assert( jsonSlurper != "" )
	context.saveNetworkId = jsonSlurper.id.toString()
     assert( context.saveNetworkId != "" )
}

if(context.loopIndex == 0)
{
     networkId = context.saveNetworkId.toInteger() + 1
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 1)
{
     networkId = context.saveNetworkId.toInteger() - 1
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 2)
{
     networkId = context.saveNetworkId .toInteger() + 100
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 3)
{
     networkId = context.saveNetworkId .toInteger() - 5
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(++context.loopIndex == 5)
{
     context.loopIndex = null
     testRunner.testCase.setPropertyValue("networkId", context.saveNetworkId)
     testRunner.gotoStepByName("loopEnd")
}

log.info('testRunner.testCase.getPropertyValue("networkId"): ' + testRunner.testCase.getPropertyValue("networkId"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="getNetwork" id="35dc356e-1cb7-4db9-9d89-f4dcc60cf5b6">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>404
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="loopToCreateInvalidNetworkId" id="4ccca8c9-06ec-4838-a0d2-fd3ab1b1f217"><con:settings/><con:config><script>testRunner.gotoStepByName( "createInvalidNetworkId")</script></con:config></con:testStep><con:testStep type="goto" name="loopToCreateInvalidNetworkId_old" id="e39c6af1-3c70-46e4-bae3-a35f3c6c88c2" disabled="true"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidNetworkId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="abdce2e0-0041-419d-af95-4d1d7638976e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="acc124c3-8764-4fec-9c29-2b80e50f7be7">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>7bcb5c65-5f74-4742-8b14-73d94e6c362a</con:value></con:property><con:property><con:name>networkId</con:name><con:value>25304</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2"
          {
               "networkStartingIp": "72.162.0.90",
               "networkEndingIp": "72.162.0.92"
          }
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJiM2JlZThmZi1kZWRlLTQ5MTAtYjAzNy0wZjRhZjFhODRhZDMiLCJleHAiOjE0NzUxNjAwNzUsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDE1LCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjFlZWFiMzNiLTlmYWYtNGU4Ni05YjA3LWU3NTc0M2MwYjQ0OSIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6ImQ1NjY4MGJlLTljZjQtNDkwZS1iM2UyLWZlN2E2ZDE0NjZiNiIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.P7MCxkcYsk45MeIY_YvE9DdsSMOva2C40yBlrYYNOQXpWoN-c_n7Mf-wtjg5UEbwRJUnNG_f6OYwbYLs7SqWCt0Y09E6_I8M3TQB_spF2kY4IDHbqDrqrJSUq9itEGO6WPB-LSlk8ipKkarnzdac5SS-F3vMBiH88RBzywi2bXnqP_FeSQPPD-pVIuiiNXiSKkFwq5mc6406Pioui-2S-qbYc3I9bGXQZHf8-rcw9mL0YBQUVVNkktvwwIZ56wIaMnz7ZML8-MSTaA1P36OFViF9ZxWEiYc7eAt8HpxO0rWII93GWfABhn1rTHUdoH8yeDrc5uFP7ep9_oAUKMoWww</con:value></con:property></con:properties></con:testCase><con:testCase id="785a6259-fbb4-4027-a3e0-731cefc0df54" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidUpdateNetwork-404" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="4479548b-2de7-4700-944a-b537798bc2a4">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="f6a63bbb-7d07-480d-836d-892a1f4281af">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="d6573342-cc58-4413-b57e-773114e47542"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
          if((propData.size() > 10) &amp;&amp; !(propData.size() % 2))
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
          }     
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
          index = 10
          while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
          {
          	testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '          {\n'
          	staticNetworkBody = staticNetworkBody + '               "networkStartingIp": ' + '"' + propData[index++] + '",\n'      
     	     testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '               "networkEndingIp": ' + '"' + propData[index++] + '"\n'

               if( propData.size() > index)
          	     staticNetworkBody = staticNetworkBody + '          },\n'
               else
          	     staticNetworkBody = staticNetworkBody + '          }\n'
          	
          	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          }
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="a5bd7dc9-ace0-4754-bd94-c45f616f2f99">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     "static": ${#TestCase#staticIPv4Network},
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "${#TestCase#networkGateway}",
          "subnet": "${#TestCase#networkSubnet}",
          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
          "primaryDns": "${#TestCase#networkPrimaryIp}",
          "secondaryDns": "${#TestCase#networkSecondaryIp}",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="readValidUpdateNetworkData" id="02818a88-6e75-451e-801e-0a679b57d112"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidUpdateNetwork-404
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validUpdateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
          if(propData[5] == "")
     	     staticNetworkBody = staticNetworkBody + '          "gateway": ' + propData[5] + ',\n'
          else
         	     staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"' + propData[5] + '",\n'     
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
          if(propData[6] == "")
               staticNetworkBody = staticNetworkBody + '          "subnet": ' + propData[6] + ',\n'
          else
               staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'          
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
          if(propData[7] == "")
          staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + propData[7] + ',\n'
          else
          staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
          if(propData[8] == "")
               staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + propData[8] + ',\n'
          else
            	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//

  //        assert(!(propData.size() % 2) &amp;&amp; (propData.size() = 10))

          if(propData.size() == 9)
          {
               testRunner.testCase.setPropertyValue("networkSecondaryDns", "")
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": \n'
          }
          else
          {
               testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          }    
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readingInvalidUpdateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="groovy" name="createInvalidNetworkId" id="1dd0de87-a6e7-4d76-b927-e8b7f59e262f"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidGetNetwork-404
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//
import groovy.json.JsonSlurper

if(context.loopIndex == null)
{
     context.loopIndex = 0
     //context.saveNetworkId = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
     def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
	def jsonSlurper = new JsonSlurper().parseText(rawResponse)
	assert( jsonSlurper != "" )
	context.saveNetworkId = jsonSlurper.id.toString()

     assert( context.saveNetworkId != "" )
}

if(context.loopIndex == 0)
{
     networkId = context.saveNetworkId.toInteger() + 1
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 1)
{
     networkId = context.saveNetworkId.toInteger() - 1
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 2)
{
     networkId = context.saveNetworkId .toInteger() + 100
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 3)
{
     networkId = context.saveNetworkId .toInteger() - 5
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(++context.loopIndex == 5)
{
     context.loopIndex = null
     testRunner.testCase.setPropertyValue("networkId", context.saveNetworkId)
     testRunner.gotoStepByName("loopEnd")
}

log.info('testRunner.testCase.getPropertyValue("networkId"): ' + testRunner.testCase.getPropertyValue("networkId"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="updateNetwork" id="8e3343b4-989f-4170-b199-c264d2dc8f80">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateNetwork" id="7f3809ad-618a-4308-b62e-6bce71e3f162" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "id": ${#TestCase#networkId},
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="83c303bb-b7c6-4849-a3ae-de1df5691bce" name="Valid HTTP Status Codes">
							<con:configuration><codes>404
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="networkDescription" value="${#TestCase#networkDescription}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="staticIPV4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkGateway" value="${#TestCase#networGateway}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPV4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="loopToCreateInvalidNetworkId" id="2e096d84-c571-483c-bb24-783306878361"><con:settings/><con:config><script>testRunner.gotoStepByName( "createInvalidNetworkId")</script></con:config></con:testStep><con:testStep type="goto" name="loopToCreateInvalidNetworkId_old" id="652946cb-d0fa-4e12-a97c-05999fdefbdb" disabled="true"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidNetworkId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="960425e4-aa5f-452a-968a-243e89522f83"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="04b8f8d2-3ad8-488b-81ea-756e53573732">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration><codes>204</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>1d0fc358-a988-4e06-ae98-876e739a8750</con:value></con:property><con:property><con:name>networkId</con:name><con:value>25309</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network2</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PRIVATE_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>100.100.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>192.0.0.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>4000</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "100.100.0.1",
          "subnet": "192.0.0.0",
          "dnsSuffix": "test.com",
          "primaryDns": "100.162.0.1",
          "secondaryDns": "100.200.0.4"
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>100.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>100.200.0.4</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiI1MDUyY2M5YS1kYzgwLTQzYmQtYjkxNi1lYmZiZTFlNmZiYTciLCJleHAiOjE0NzUxNjAwNzYsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDE2LCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImEyNDQxZWRlLTJhMTgtNDFiNy04ODBkLTRiMTY3MDQ3MTMzNyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6Ijk4Zjk1YWM2LTliNjktNDg1MC1iZWY1LWMxZDJkNTkwOWZhNyIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.Zkx8LvaYbfrc1k2ChByt3nUrPtQCPRcrw4U8WgmWH-Wec-BadoPCUopmafNwB8raKDXNyaqMy0bI52imPMmecgsfi3ZCR5gEjl2uZTv6CIEjHSxIYV0YCdaR5cl17-SKkv3XLJqX3N0B-wko5JYWtPbM5UPnFwdmHGupJnw0Z6L7DakD03r-KKZckRcsAWlMB_e0Rlp_9bH0KRh2lYibRGdQ3qCQO0j70KWyv0GiwapTK_XdVnVG6RjDm64fSXYftmAko0XPgvmQfXCqZdE1aymZ6KKsk6XefHJhN1_d1XPA4iecO7FfvdWfnisGU1lCYqUJq3yeqrG6Y-ZH1pScQQ</con:value></con:property></con:properties></con:testCase><con:testCase id="de9b9469-52c8-472e-a590-02b267b2c9bd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidDeleteNetwork-404" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="53027533-ffa6-4f5a-b75b-4bd7c554b727">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="2a2e17df-d257-4892-b421-b1d926bcb222">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="1e940b08-55ec-4622-9d05-00950f41e321"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
          if((propData.size() > 10) &amp;&amp; !(propData.size() % 2))
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
          }     
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
          index = 10
          while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
          {
          	testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '          {\n'
          	staticNetworkBody = staticNetworkBody + '               "networkStartingIp": ' + '"' + propData[index++] + '",\n'      
     	     testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '               "networkEndingIp": ' + '"' + propData[index++] + '"\n'

               if( propData.size() > index)
          	     staticNetworkBody = staticNetworkBody + '          },\n'
               else
          	     staticNetworkBody = staticNetworkBody + '          }\n'
          	
          	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          }
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="c8c9e59a-f304-4f98-9244-0eddbfbacf4f">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     "static": ${#TestCase#staticIPv4Network},
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "${#TestCase#networkGateway}",
          "subnet": "${#TestCase#networkSubnet}",
          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
          "primaryDns": "${#TestCase#networkPrimaryIp}",
          "secondaryDns": "${#TestCase#networkSecondaryIp}",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="createInvalidNetworkId" id="7fdce5b5-464b-42d2-b550-39ebf39fd87e"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidGetNetwork-404
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//
import groovy.json.JsonSlurper

if(context.loopIndex == null)
{
     context.loopIndex = 0
     def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
	def jsonSlurper = new JsonSlurper().parseText(rawResponse)
	assert( jsonSlurper != "" )
	context.saveNetworkId = jsonSlurper.id.toString()
    
     //context.saveNetworkId = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
     assert( context.saveNetworkId != "" )
}

if(context.loopIndex == 0)
{
     networkId = context.saveNetworkId.toInteger() + 1
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 1)
{
     networkId = context.saveNetworkId.toInteger() - 1
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 2)
{
     networkId = context.saveNetworkId .toInteger() + 100
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 3)
{
     networkId = context.saveNetworkId .toInteger() - 5
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}


if(context.loopIndex == 4)
{
     networkId = 1
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(++context.loopIndex == 6)
{
     context.loopIndex = null
     testRunner.testCase.setPropertyValue("networkId", context.saveNetworkId)
     testRunner.gotoStepByName("loopEnd")
}

log.info('testRunner.testCase.getPropertyValue("networkId"): ' + testRunner.testCase.getPropertyValue("networkId"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="invalidDeleteNetwork" id="e698c001-1f04-4e68-a68b-0a3b33e79a28">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="invalidDeleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration><codes>404</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="loopToCreateInvalidNetworkId" id="8af484b6-ec33-4da5-bda2-3ebf17a2dc4a"><con:settings/><con:config><script>testRunner.gotoStepByName( "createInvalidNetworkId")</script></con:config></con:testStep><con:testStep type="goto" name="loopToCreateInvalidNetworkId_old" id="512fa608-c802-4bdd-83a6-727ab77f7e3d" disabled="true"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidNetworkId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="63be9e84-5942-487a-9959-843262a4b97f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="b6bff0fc-6745-4eae-aa25-4b81133c470a">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>a0376818-4930-4456-87c5-a10db304683c</con:value></con:property><con:property><con:name>networkId</con:name><con:value>25314</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2"
          {
               "networkStartingIp": "72.162.0.90",
               "networkEndingIp": "72.162.0.92"
          }
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiIwYzE0ODJhZi1iNDQ4LTQ0ZDktYjEyNy02NjMwZjRlZjBjZjciLCJleHAiOjE0NzUxNjAwNzgsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDE4LCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6Ijg3NDJlODU5LThhYjMtNGExOC1iNDM5LTY5MTczNTg2MmQwOSIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6ImU5MDc0NzQwLTlkNDUtNDE4OS05NjVjLTQ5YTQ3MjZkMTZkZSIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.NN53IM0BaI3NJC4pIp9zyWHWtdw5iRetme6-GFndD7PKbdao4yuLFXaThwaHVwL6uP0sSc5tnHRerkPBcbENgPRh4wfDhodto2W4nY7K2fDFhlXE6frJhV-u-CfQRRBATuw84sb0XNZEusMiHQ9wBPqLCj3KB-GgOq7PzGVXUmjDnLebclKpXThruHAbQT26zzc_uL72hNCJBfU8wd4G1hrFhsdg7dpdcd_UXbDM7rzdXratgtOPY-N5L1w8HnJoYdXI-9I4d6uF8xALQs4OOYbsoQ9kokw29wZbfXNZuyQ8qHINqHA3l6EZjaJcZVGnMRFZrQp8cHt6mqGyio93ow</con:value></con:property></con:properties></con:testCase><con:testCase id="1c01da17-a5b7-470c-83ff-4aef631ff436" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidAddIPv4Range-404" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="178e2138-436f-42e1-b763-ee23ed1bcc24">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#keycloakProtocol}://${#Project#KeycloakIP}:${#Project#keycloakPort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_secret" value="${#Project#secret}"/>
  <con:entry key="realm" value="${#Project#realm}"/>
  <con:entry key="client_id" value="${#Project#client}"/>
</con:parameters>
					<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>realm</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="setAccessToken" id="b828841a-4c9b-404d-9811-c2dee4e90ddd">
				<con:settings/>
				<con:config><script>import groovy.json.JsonSlurper
def responseContent = testRunner.testCase.getTestStepByName("authenticate").getPropertyValue("response");
def slurperresponse = new JsonSlurper().parseText(responseContent);
testRunner.testCase.setPropertyValue("access_token", slurperresponse.access_token);
log.info(slurperresponse.access_token);</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="ff831653-09e1-4c89-ac5a-fad1a04210e5"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
          if((propData.size() > 10) &amp;&amp; !(propData.size() % 2))
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
          }     
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
          index = 10
          while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
          {
          	testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '          {\n'
          	staticNetworkBody = staticNetworkBody + '               "networkStartingIp": ' + '"' + propData[index++] + '",\n'      
     	     testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
          	staticNetworkBody = staticNetworkBody + '               "networkEndingIp": ' + '"' + propData[index++] + '"\n'

               if( propData.size() > index)
          	     staticNetworkBody = staticNetworkBody + '          },\n'
               else
          	     staticNetworkBody = staticNetworkBody + '          }\n'
          	
          	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          }
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="4ed69c2a-ac00-4241-879f-acb192b88427">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     "static": ${#TestCase#staticIPv4Network},
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "${#TestCase#networkGateway}",
          "subnet": "${#TestCase#networkSubnet}",
          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
          "primaryDns": "${#TestCase#networkPrimaryIp}",
          "secondaryDns": "${#TestCase#networkSecondaryIp}",
          "ipRange":
          [
               {
                    "startingIp": "${#TestCase#networkStartingIp}",
                    "endingIp": "${#TestCase#networkEndingIp}"
               }
          ]
     }
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkEndingIp" value="${#TestCase#networkEndingIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkStartingIp" value="${#TestCase#networkStartingIp}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="readAddIPv4RangeData" id="3161c0bf-5793-4181-be1a-770415d54bff"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidAddIPv4Range-400
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validAddIPv4Data.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))

     context.loopIndex = 0
     context.saveNetworkId = testRunner.testCase.getPropertyValue("networkId")
}

testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)

log.info("Reading file, setting up variables")
String[] propData = testSetupLine.split(",")

testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
testRunner.testCase.setPropertyValue("networkAddEndingIp", propData[1])

log.info("Shutting down fileReader")
context.fileReader.close()
context.loopIndex = null
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="groovy" name="createInvalidNetworkId" id="ff91f7cc-8c43-4eea-bff3-8fedf397d24b"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidGetNetwork-404
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//
import groovy.json.JsonSlurper

if(context.loopIndex == null)
{
     context.loopIndex = 0
     def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
	def jsonSlurper = new JsonSlurper().parseText(rawResponse)
	assert( jsonSlurper != "" )
	context.saveNetworkId = jsonSlurper.id.toString()
     
     //context.saveNetworkId = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
     log.info("context.saveNetworkId: " + context.saveNetworkId)
     assert context.saveNetworkId != ""
}

if(context.loopIndex == 0)
{
     networkId = context.saveNetworkId.toInteger() + 1
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 1)
{
     networkId = context.saveNetworkId.toInteger() - 1
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 2)
{
     networkId = context.saveNetworkId .toInteger() + 100
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 3)
{
     networkId = context.saveNetworkId .toInteger() - 5
     testRunner.testCase.setPropertyValue("networkId", networkId.toString())
}

if(context.loopIndex == 4)
     testRunner.testCase.setPropertyValue("networkId", "")

if(++context.loopIndex == 6)
{
     context.loopIndex = null
     testRunner.testCase.setPropertyValue("networkId", context.saveNetworkId)
     testRunner.gotoStepByName("loopEnd")
}

log.info('testRunner.testCase.getPropertyValue("networkId"): ' + testRunner.testCase.getPropertyValue("networkId"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="addIPV4Range" id="e145b96f-5786-426f-b3b2-3c2ad2a2128c">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="addIPV4Range" id="f8f2c315-2eb3-4293-a8a6-30dd1ddbf079" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request>{
     "startingIp": "${#TestCase#networkAddStartingIp}",
     "endingIp": "${#TestCase#networkAddEndingIp}"
}

						</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="81f3a7a9-33e8-4139-82db-3213ab4866e0" name="Valid HTTP Status Codes">
							<con:configuration><codes>404, 405
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkAddStartingIp" value="${#TestCase#networkAddStartingIp}"/>
  <con:entry key="networkAddEndingIp" value="${#TestCase#networkAddEndingIp}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="loopToCreateInvalidNetworkId" id="05461b7b-4dd2-43ef-aa6d-02657fe1aad2"><con:settings/><con:config><script>testRunner.gotoStepByName( "createInvalidNetworkId")</script></con:config></con:testStep><con:testStep type="goto" name="loopToCreateInvalidNetworkId_old" id="4eb05af6-5ddd-46d8-8575-2dd0312c8652" disabled="true"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>createInvalidNetworkId</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="ada35e68-9042-4b82-9a0a-b19a5a6720df"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="b62ad23f-a485-4f43-b38f-1e26f94545de">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestCase#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#protocol}://${#Project#ApplianceIP}:${#Project#servicePort}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>5a4e5ffb-650b-4dac-87d3-3ab600641ac7</con:value></con:property><con:property><con:name>networkId</con:name><con:value>25319</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>ipv4RangeId</con:name><con:value>[539]</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>294</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value>72.162.0.89</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2"
          {
               "networkStartingIp": "72.162.0.90",
               "networkEndingIp": "72.162.0.92"
          }
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJBVlJ6LXNMVVhkZzBBaDdJOWJrek12T041alRnbmxiWm4tQVpVeDd0OS1VIn0.eyJqdGkiOiJmNDE4MTZlNC0zZDM3LTQ3NjItYmY2NS05MTZiMzk1ZmY5NzgiLCJleHAiOjE0NzUxNjAwODAsIm5iZiI6MCwiaWF0IjoxNDc1MTYwMDIwLCJpc3MiOiJodHRwczovLzEwMC42OC4xMjMuMTczOjg1NDMvYXV0aC9yZWFsbXMvc21pLW1pY3Jvc2VydmljZXMiLCJhdWQiOiJzb2FwdWktY2xpZW50Iiwic3ViIjoiMjgxNjNhNmItODFlMy00YTBlLTg3YTctYTBiZjU5YzIwMjYxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic29hcHVpLWNsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImQyM2JkZTczLWU0OTUtNDlkYy05YmVkLTMzYzg3YjljZjkyYyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjViNzUyYjhkLTA2NmMtNGMyNC1iYmM4LTE3MDk4ZTY4MmIwMSIsImFsbG93ZWQtb3JpZ2lucyI6W10sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ1bWFfYXV0aG9yaXphdGlvbiIsIlJPTEVfV1JJVEUiLCJST0xFX1JFQUQiLCJST0xFX0NPTkZJR1VSRV9ORVRXT1JLIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyMSIsImVtYWlsIjoibWljaGFlbF9oZXBmZXJAZGVsbC5jb20ifQ.PE0bxfofXBatlARyvvosrAVhZTe78l6wGQ8lwKtNy4S4vUwHT6l1H-5m7A8JrlDbnjiP9EEpd7x4vwAxoNkbDkmLN-giQgBQR0pq-b-Fz1GX9XctI8VIGLAWzi6bkBK3VJklq5TGZ6HJhGXEDL-lqdYznraSUwNAN7dQidohzbHUGHIrr3Vk4gsp8AFcjUuZmeaAGTQ0Y0_s97IkNjPJPFa8_U20sWYS_Tt54J5gSXiKnlM9dfBz8nBlHtC23v3b4u0Berli2jnHorx6TiyNtM6YNywHEhl_Vl1GtrEBxSgUf8ZyqGAAjBEsrg5i7t_chpI1sDOp3422dI6Pg56aOw</con:value></con:property></con:properties></con:testCase><con:testCase id="fc18699f-f249-48cf-a2f4-854259e8df24" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidCreateNetwork-500" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="4c7cbdb6-378e-4a43-9f08-c09dbcd3b3d0" disabled="true">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{"user": "root", "password": "linux"}</con:request>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					<con:parameterOrder><con:entry>realm</con:entry><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetJSessionId" id="5d1747a5-a1a8-4974-8c17-39191294bec1" disabled="true">
				<con:settings/>
				<con:config><script>def header = testRunner.testCase.getTestStepByName("authenticate").httpRequest.response.responseHeaders["JSESSIONID"][0]
testRunner.testCase.setPropertyValue("JSessionId", header.toString())
// Shiro need some time to replicate SESSION data frmo applicace.war to api.war
// Use 1000ms for now, change it if necessary
sleep(1000)</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readInvalidCreateNetworkData" id="21696cb2-15e8-49af-8ada-0a7a36c3b3e1"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidCreateNetwork-500
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidCreateNetwork500.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
//     testRunner.testCase.setPropertyValue("networkName", propData[0])
     if(propData[0] == "")
          testRunner.testCase.setPropertyValue("networkName", propData[0])
     else
          testRunner.testCase.setPropertyValue("networkName", '"' + propData[0] + '"')

     if(propData[1] == "")
          testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     else
          testRunner.testCase.setPropertyValue("networkDescription", '"' + propData[1] + '"')

     if(propData[2] == "")
          testRunner.testCase.setPropertyValue("networkType", propData[2])
     else
          testRunner.testCase.setPropertyValue("networkType", '"' + propData[2] + '"')

     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
          if(propData[5] == "")
               staticNetworkBody = staticNetworkBody + '          "gateway": ' + propData[5] + ',\n'
          else
     	     staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"' + propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
          if(propData[6] == "")
               staticNetworkBody = staticNetworkBody + '          "subnet": ' + propData[6] + ',\n'
          else
     	     staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
          if(propData[7] == "")
               staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + propData[7] + ',\n'
          else
               staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
          if(propData[8] ==  "")
               staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + propData[8] + ',\n'
          else
               staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

//          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 9)
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '\n'

          if(propData.size() == 10)
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               if(propData[9] == "")
                    staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + propData[9] + ',\n'
               else
                    staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    if(propData[index] == "")
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + ',\n'
                    else
                         staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    if(propData[index] == "")
                         staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '\n'
                    else
                         staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readingInvalidCreateNetworkData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="2c36497c-f796-43c0-b0c7-1c61c12cf1ac">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "name": ${#TestCase#networkName},
     "description": ${#TestCase#networkDescription},
     "type": ${#TestCase#networkType},
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>500</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToReadInvalidGetNetworkData" id="d54aa72c-853e-45ba-8a0d-e9251c8be0e4"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readInvalidCreateNetworkData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="31a8d54b-dd93-48d4-bd30-c3b0f72317a8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>6b49e891-f1f4-4fa6-aaec-fae904370285</con:value></con:property><con:property><con:name>networkId</con:name><con:value/></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value/></con:property><con:property><con:name>networkDescription</con:name><con:value>"QA Test Network"</con:value></con:property><con:property><con:name>networkType</con:name><con:value>"PUBLIC_LAN"</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>1</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property></con:properties></con:testCase><con:testCase id="d93e0c59-3bac-4413-9633-88a7e8f74ff1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidUpdateNetwork-500" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="335d8122-497d-4df0-b51c-176fe075d3b7">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{"user": "root", "password": "linux"}</con:request>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					<con:parameterOrder><con:entry>realm</con:entry><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetJSessionId" id="85b82a7c-4742-4ead-9689-3bf2f2e1c6e2">
				<con:settings/>
				<con:config><script>def header = testRunner.testCase.getTestStepByName("authenticate").httpRequest.response.responseHeaders["JSESSIONID"][0]
testRunner.testCase.setPropertyValue("JSessionId", header.toString())
// Shiro need some time to replicate SESSION data frmo applicace.war to api.war
// Use 1000ms for now, change it if necessary
sleep(1000)</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="b1ab2af3-26b0-4574-8b42-86f1952eaa10"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="548f5bf4-2d6e-40f6-ac7a-41523d5530bd">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="394ca621-d7b4-41d0-9331-179f5d898325"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")

assert( rawResponse != "" )

testRunner.testCase.setPropertyValue("networkId", rawResponse.toString())
log.info(rawResponse)

</script></con:config></con:testStep><con:testStep type="groovy" name="readInvalidUpdateNetworkData" id="5f7d84bb-fe15-453a-9065-8e10f0d79e6a"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidUpdateNetwork-500
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidUpdateNetwork500.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
//     testRunner.testCase.setPropertyValue("networkName", propData[0])
     if(propData[0] == "")
          testRunner.testCase.setPropertyValue("networkName", propData[0])
     else
          testRunner.testCase.setPropertyValue("networkName", '"' + propData[0] + '"')

     if(propData[1] == "")
          testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     else
          testRunner.testCase.setPropertyValue("networkDescription", '"' + propData[1] + '"')

     if(propData[2] == "")
          testRunner.testCase.setPropertyValue("networkType", propData[2])
     else
          testRunner.testCase.setPropertyValue("networkType", '"' + propData[2] + '"')

     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
          if(propData[5] == "")
     	     staticNetworkBody = staticNetworkBody + '          "gateway": ' + propData[5] + ',\n'
          else
         	     staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"' + propData[5] + '",\n'     
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
          if(propData[6] == "")
               staticNetworkBody = staticNetworkBody + '          "subnet": ' + propData[6] + ',\n'
          else
               staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'          
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
          if(propData[7] == "")
          staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + propData[7] + ',\n'
          else
          staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
          if(propData[8] == "")
               staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + propData[8] + ',\n'
          else
            	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//

  //        assert(!(propData.size() % 2) &amp;&amp; (propData.size() = 10))

          if(propData.size() == 9)
          {
               testRunner.testCase.setPropertyValue("networkSecondaryDns", "")
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": \n'
          }
          else
          {
               testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          }    
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readingInvalidUpdateNetworkData")
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="updateNetwork" id="5d11b70a-f337-4e9c-bfd8-bcef81ead9ea">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "name": ${#TestCase#networkName},
     "description": ${#TestCase#networkDescription},
     "type": ${#TestCase#networkType},
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>500</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToInvalidUpdateNetworkData" id="f76a3ef9-8864-4115-885e-860161a8de93"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readInvalidUpdateNetworkData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="89f1cba9-0666-4109-a865-0dea11ecdd66"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="9234d942-6204-4153-b9c5-2d7cba54d7d6">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>45ce61f7-6464-42e6-82b0-7a1c1b2deedb</con:value></con:property><con:property><con:name>networkId</con:name><con:value>324334</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value/></con:property><con:property><con:name>networkDescription</con:name><con:value>"QA Test Network"</con:value></con:property><con:property><con:name>networkType</con:name><con:value>"PUBLIC_LAN"</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>1</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2"
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property></con:properties></con:testCase><con:testCase id="666782ec-72ae-466d-a489-bed4ec7e1abb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidAddIPv4Range-500" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="ea1a8b52-d6ee-4691-93c9-a182ecbe696c">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{"user": "root", "password": "linux"}</con:request>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					<con:parameterOrder><con:entry>realm</con:entry><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetJSessionId" id="3bb78898-6974-4203-88b0-21c357e82d76">
				<con:settings/>
				<con:config><script>def header = testRunner.testCase.getTestStepByName("authenticate").httpRequest.response.responseHeaders["JSESSIONID"][0]
testRunner.testCase.setPropertyValue("JSessionId", header.toString())
// Shiro need some time to replicate SESSION data frmo applicace.war to api.war
// Use 1000ms for now, change it if necessary
sleep(1000)</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="76f5b549-7936-43b7-9c65-90433faa8e02"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="a7576922-9b69-40c0-b5e1-7526ec79db9d">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="cdbddf15-3c09-4556-a53a-72d9f78bc241"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")

assert( rawResponse != "" )

testRunner.testCase.setPropertyValue("networkId", rawResponse.toString())
log.info(rawResponse)

</script></con:config></con:testStep><con:testStep type="groovy" name="readInvalidAddIPv4RangeData" id="130e6d93-3b92-4212-890d-a230cd2634de"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidAddIPv4Range-400
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidAddIPv4Range500.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)

if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")
     String[] propData = testSetupLine.split(",")


     if(propData[0] == "")
          testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
     else
          testRunner.testCase.setPropertyValue("networkAddStartingIp", '"' + propData[0] + '"')

     if(propData.size() == 1)
          testRunner.testCase.setPropertyValue("networkAddEndingIp", null)
     else
          testRunner.testCase.setPropertyValue("networkAddEndingIp", '"' + propData[1] + '"')
}
else
{
     log.info("Shutting down fileReader")
     context.fileReader.close()
     context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="addIPV4Range" id="8fa150b1-00e6-4519-b31c-7bf2e69d413f">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="addIPV4Range" id="f8f2c315-2eb3-4293-a8a6-30dd1ddbf079" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "startingIp": ${#TestCase#networkAddStartingIp},
     "endingIp": ${#TestCase#networkAddEndingIp}
}</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="81f3a7a9-33e8-4139-82db-3213ab4866e0" name="Valid HTTP Status Codes">
							<con:configuration><codes>500
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkAddStartingIp" value="${#TestCase#networkAddStartingIp}"/>
  <con:entry key="networkAddEndingIp" value="${#TestCase#networkAddEndingIp}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToReadInvalidAddIPv4RangeData" id="0f675d2e-2d42-4204-8dd1-1922cf64152f"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readInvalidAddIPv4RangeData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="625638c6-5b06-4076-8b1c-cd714c21cb4f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="095e3943-ae61-4a9c-8a32-3a39a39fea01">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>75adf5fc-535a-491e-8776-430d8be303bc</con:value></con:property><con:property><con:name>networkId</con:name><con:value>324339</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value/></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"72.162.0.89"</con:value></con:property></con:properties></con:testCase><con:testCase id="8640f56d-9031-4c70-9232-49332edb5bc8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidUpdateIPv4Range-500" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="dd7f3c95-9b1f-40d1-bbfa-b5112de69ed2">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{"user": "root", "password": "linux"}</con:request>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					<con:parameterOrder><con:entry>realm</con:entry><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetJSessionId" id="87350615-2623-4077-b4ed-6204552a50bc">
				<con:settings/>
				<con:config><script>def header = testRunner.testCase.getTestStepByName("authenticate").httpRequest.response.responseHeaders["JSESSIONID"][0]
testRunner.testCase.setPropertyValue("JSessionId", header.toString())
// Shiro need some time to replicate SESSION data frmo applicace.war to api.war
// Use 1000ms for now, change it if necessary
sleep(1000)</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="a2bfc2b8-98aa-4260-8017-1daf699e5eef"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="0df8123f-0f81-4102-a029-cad8aefefb45">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="b0f212ed-3a7a-4d30-8ae7-1957a2818a08"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")

assert( rawResponse != "" )

testRunner.testCase.setPropertyValue("networkId", rawResponse.toString())
log.info(rawResponse)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getAllNetworks" id="ab4b703b-c551-4e36-ac34-8455a6fbe411">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="GetAllNetworks Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getAllNetworks" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="536e06d9-c9b1-4fff-9c80-373ce9513d3a" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="limit" value="10"/>
							<con:entry key="offset" value="0"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetIPv4RangeId" id="e78a4a9f-95d0-43bf-adcf-325f92da462c"><con:settings/><con:config><script>//
// This script will harvest the first range ID obtained by calling the
// getAllNetworks test step.
//
// Access this network ID using: ${#TestCase#RangeId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getAllNetworks").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)

testRunner.testCase.setPropertyValue("RangeId", slurpResponse.data[0].staticIpv4NetworkConfiguration.ipRange.id[0].toString())
log.info(slurpResponse.data[0].staticIpv4NetworkConfiguration.ipRange.id[0].toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="readInvalidUpdateIPv4RangeData" id="25ab4370-c75b-4f5e-bd9a-f1125d5fa7cf"><con:settings/><con:config><script>//
// This script will read the following file to generate bad input for the
// test case: invalidUpdateIPv4Range-400
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\invalidAddIPv4Range500.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
     context.loopIndex = 0
}

testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)

if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")
     String[] propData = testSetupLine.split(",")


     if(propData[0] == "")
          testRunner.testCase.setPropertyValue("networkAddStartingIp", propData[0])
     else
          testRunner.testCase.setPropertyValue("networkAddStartingIp", '"' + propData[0] + '"\n')

     if(propData.size() == 1)
          testRunner.testCase.setPropertyValue("networkAddEndingIp", null)
     else
          testRunner.testCase.setPropertyValue("networkAddEndingIp", '"' + propData[1] + '"\n')
}
else
{
     log.info("Shutting down fileReader")
	context.fileReader.close()
	context.fileReader = null
     testRunner.gotoStepByName("loopEnd")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="updateIPV4Range" id="63459917-c366-4fa7-9065-86c32511dc2b">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/ipv4Ranges/{rangeId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateIPV4Range" id="f8f2c315-2eb3-4293-a8a6-30dd1ddbf079" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "id": ${#TestCase#RangeId},
     "startingIp": ${#TestCase#networkAddStartingIp},
     "endingIp": ${#TestCase#networkAddEndingIp}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2/ipv4Ranges/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="81f3a7a9-33e8-4139-82db-3213ab4866e0" name="Valid HTTP Status Codes">
							<con:configuration><codes>500
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkAddStartingIp" value="${#TestCase#networkAddStartingIp}"/>
  <con:entry key="rangeId" value="${#TestCase#rangeId}"/>
  <con:entry key="networkAddEndingIp" value="${#TestCase#networkAddEndingIp}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="goto" name="loopToReadInvalidUpdateIPv4RangeData" id="cd190c77-94b4-4582-8eb6-ed9074ecfb4e"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>while true</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>readInvalidUpdateIPv4RangeData</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="loopEnd" id="8fd80971-2412-4d76-b8d4-14262eae1061"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="f2692d1d-e775-4a19-a369-d29c95b0de3c">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>4460046c-d963-44d6-8ca4-d7ee4b0cd056</con:value></con:property><con:property><con:name>networkId</con:name><con:value>485</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>networkAddStartingIp</con:name><con:value>"72.162.0.1"
</con:value></con:property><con:property><con:name>networkAddEndingIp</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RangeId</con:name><con:value>486</con:value></con:property></con:properties></con:testCase><con:testCase id="d3770dde-cdb9-4ecd-9ded-5333298dd290" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidDeleteNetworkAFCDown" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="c22ca6a4-1551-4269-abc5-d5145ce4b7a3">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{"user": "root", "password": "linux"}</con:request>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					<con:parameterOrder><con:entry>realm</con:entry><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetJSessionId" id="86e9681c-c7e6-41cc-b5c0-9a2bdc862d24">
				<con:settings/>
				<con:config><script>def header = testRunner.testCase.getTestStepByName("authenticate").httpRequest.response.responseHeaders["JSESSIONID"][0]
testRunner.testCase.setPropertyValue("JSessionId", header.toString())
// Shiro need some time to replicate SESSION data frmo applicace.war to api.war
// Use 1000ms for now, change it if necessary
sleep(1000)</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="1b52ff92-01b0-400e-b26e-3d1b7e85e250"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }

     log.info("Leaving readValidCreateNetworkData")

}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
testRunner.gotoStepByName("loopEnd")
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="8297fcc9-2775-4a7f-b352-a56378eaeeb3">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="2b9c3b0e-86bd-42e0-afc6-8dcf901ef341"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getNetwork" id="ef0e5ed6-6148-4933-a0ba-87eaccdf17d8">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="suspendAFC" id="e840fe3a-9b66-46d4-b9a1-16eddb2bc9f5"><con:settings/><con:config><script>//
//
//
windowsCmd = "cmd /c cd C:\\Program Files (x86)\\PuTTY &amp;"
plinkCmd = "plink.exe" + " " + testRunner.testCase.testSuite.project.getPropertyValue("ApplianceIP") + " " + "-l root -pw linux"
suspendCmd = "virsh suspend afc"
command = windowsCmd + " " + plinkCmd + " " + suspendCmd

result = command.execute().text
log.info(result)
</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="26bfdd1f-c16a-4204-b3bb-a291f43c6464"><con:settings/><con:config><delay>15000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork-Fail" id="2c9e162d-9c61-4514-b09c-b6f628b32231">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork-Fail" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration><codes>500
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyOriginalAFCPopulation" id="bfbba1b7-5bfb-478f-914a-ab5827017d51"><con:settings/><con:config><script>//
// This script will verify that the AFC has the basic info from
// a Create Network call.
//
// plink (part of the PuTTY package will be used to access the ICEE,
// then curl will be used to access the AFC VM.
//
// The network-type field returned will be mapped to the type provided
// during the Create/Update Network API.
//
windowsCmd = "cmd /c cd C:\\Program Files (x86)\\PuTTY &amp;"
plinkCmd = "plink.exe" + " " + testRunner.testCase.testSuite.project.getPropertyValue("ApplianceIP") + " " + "-l root -pw linux"
resumeCmd = "virsh resume afc"
command = windowsCmd + " " + plinkCmd + " " + resumeCmd

result = command.execute().text
log.info(result)

curlCmd = 'curl -H "Content-Type: application/json" -i -X GET http://admin:admin@100.66.1.21:8181/restconf/config/north-bound:fabrics/fabric/FABRIC1/network/'
curlCmd = curlCmd + testRunner.testCase.getPropertyValue("networkId")
command = windowsCmd + " " + plinkCmd + " " + curlCmd

result = command.execute().text
log.info(result)

assert result.contains("200 OK")
assert result.contains(testRunner.testCase.getPropertyValue("networkName"))
assert result.contains(testRunner.testCase.getPropertyValue("VLanId"))
assert result.contains(testRunner.testCase.getPropertyValue("networkId"))

switch(testRunner.testCase.getPropertyValue("networkType"))
{
case "PUBLIC_LAN":
case "PRIVATE_LAN":
case "OOB_OR_INFRASTRUCTURE_MANAGEMENT":
case "HYPERVISOR_MANAGEMENT":
case "HYPERVISOR_MIGRATION":
case "HYPERVISOR_CLUSTER_PRIVATE":
case "PXE":
case "FILESHARE":
case "HARDWARE_MANAGEMENT":
     assert result.contains("DATA_NETWORK")
     break
case "STORAGE_ISCSI_SAN":
case "STORAGE_FCOE_SAN":
     assert result.contains("STORAGE_NETWORK")
     break
case "FIP_SNOOPING":
     assert result.contains("PRIMISCUOUS_NETWORK")
     break
default:
     log.info("Unknown network type found")
}
</script></con:config></con:testStep><con:testStep type="delay" name="Delay2" id="2c41b773-e388-4eb3-b494-1b7738a5f82f"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="a0091ef2-5880-4569-9129-ba5bd4df6572">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration><codes>204
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>ed51c60e-a417-4609-a9a1-74d8b0b9482b</con:value></con:property><con:property><con:name>networkId</con:name><con:value>77398</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>211</con:value></con:property></con:properties></con:testCase><con:testCase id="0dd7a6a9-dacf-4a0f-b1ed-7701e782876a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidCreateNetworkAFCDown" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="deb3e11e-ec4b-4db3-ba03-2dd497296505">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{"user": "root", "password": "linux"}</con:request>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					<con:parameterOrder><con:entry>realm</con:entry><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetJSessionId" id="9b0ce1a5-87fa-4b58-b93c-0c4d11684d4b">
				<con:settings/>
				<con:config><script>def header = testRunner.testCase.getTestStepByName("authenticate").httpRequest.response.responseHeaders["JSESSIONID"][0]
testRunner.testCase.setPropertyValue("JSessionId", header.toString())
// Shiro need some time to replicate SESSION data frmo applicace.war to api.war
// Use 1000ms for now, change it if necessary
sleep(1000)</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="2ed2b8e1-7030-48ea-81f4-42394e832500"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }

     log.info("Leaving readValidCreateNetworkData")
  
     log.info("Leaving readingValidUpdateNetworkData")
     windowsCmd = "cmd /c cd C:\\Program Files (x86)\\PuTTY &amp;"
     plinkCmd = "plink.exe" + " " + testRunner.testCase.testSuite.project.getPropertyValue("ApplianceIP") + " " + "-l root -pw linux"
     suspendCmd = "virsh suspend afc"
     command = windowsCmd + " " + plinkCmd + " " + suspendCmd

     result = command.execute().text
     log.info(result)
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
testRunner.gotoStepByName("loopEnd")
</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="8dcf4edc-549e-4fb9-97a3-6ab26a27c21d"><con:settings/><con:config><delay>15000</delay></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="8373dc36-5490-4505-a6fd-ee2182712446">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>500
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="a1a00847-3e1a-4248-97e1-da05ede968e1"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="groovy" name="resumeAFC" id="7dce14fc-e9c6-43af-b5d2-24db35655972"><con:settings/><con:config><script>windowsCmd = "cmd /c cd C:\\Program Files (x86)\\PuTTY &amp;"
plinkCmd = "plink.exe" + " " + testRunner.testCase.testSuite.project.getPropertyValue("ApplianceIP") + " " + "-l root -pw linux"
resumeCmd = "virsh resume afc"
command = windowsCmd + " " + plinkCmd + " " + resumeCmd

result = command.execute().text
log.info(result)</script></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>dbbbca71-bbf8-4e43-9bdb-f65e97dc99b9</con:value></con:property><con:property><con:name>networkId</con:name><con:value>null</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>255.255.255.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>2</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "72.162.0.1",
          "subnet": "255.255.255.0",
          "dnsSuffix": "test.com",
          "primaryDns": "72.162.0.1",
          "secondaryDns": "72.162.0.2",
          "ipRange":
          [
               {
                    "startingIp": "72.162.0.90",
                    "endingIp": "72.162.0.92"
               }
          ]
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>72.162.0.2</con:value></con:property></con:properties></con:testCase><con:testCase id="8dc026c9-ffe7-41ea-9451-c03505df4751" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="invalidUpdateNetworkAFCDown" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="authenticate" id="929f1246-ba7b-469b-bc84-4a9f83150ca9">
				<con:settings/>
				<con:config service="Authenticate" resourcePath="/auth/realms/{realm}/protocol/openid-connect/token" methodName="Authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="authenticate" id="39e90850-8cb2-4a88-ab35-81ab026fee10" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{"user": "root", "password": "linux"}</con:request>
						<con:originalUri>https://172.31.59.156/v1.0/appliance/session/authenticate
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="fc61b3b4-a487-45b6-8e70-05884862888f" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					<con:parameterOrder><con:entry>realm</con:entry><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetJSessionId" id="e7adbac4-ae9d-4a50-9cd2-d0b635fa6579">
				<con:settings/>
				<con:config><script>def header = testRunner.testCase.getTestStepByName("authenticate").httpRequest.response.responseHeaders["JSESSIONID"][0]
testRunner.testCase.setPropertyValue("JSessionId", header.toString())
// Shiro need some time to replicate SESSION data frmo applicace.war to api.war
// Use 1000ms for now, change it if necessary
sleep(1000)</script></con:config>
			</con:testStep><con:testStep type="groovy" name="readCreateNetworkData" id="6125810d-5352-4411-ad2a-b04e482b3062"><con:settings/><con:config><script>//
// This script will read the following file to generate good input for the
// test case: invalidUpdateNetwork
//
// This script will build most of the request body, starting with the line:
// "static": ${#TestCase#staticIPv4Network}
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validCreateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
     	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"'+ propData[5] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
     	staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
     	staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
     	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//
          testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])

          assert(!(propData.size() % 2) &amp;&amp; (propData.size() >= 10))
          if(propData.size() == 10)
         
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          else
          {
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '",\n'
               staticNetworkBody = staticNetworkBody + '          "ipRange":\n'
               staticNetworkBody = staticNetworkBody + '          [\n'
    
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Determine how many ipRange entries we have.
//
               index = 10
               while((propData.size() > index) &amp;&amp; !(propData.size() % 2))
               {
          	     testRunner.testCase.setPropertyValue("networkStartingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '               {\n'
                    staticNetworkBody = staticNetworkBody + '                    "startingIp": ' + '"' + propData[index++] + '",\n'      
                    testRunner.testCase.setPropertyValue("networkEndingIp", propData[index])
                    staticNetworkBody = staticNetworkBody + '                    "endingIp": ' + '"' + propData[index++] + '"\n'

                    if( propData.size() > index)
                         staticNetworkBody = staticNetworkBody + '               },\n'
                    else
                         staticNetworkBody = staticNetworkBody + '               }\n'
          	
                    testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
               }
  
               staticNetworkBody = staticNetworkBody + '          ]\n'
               testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          } 
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }     
     log.info("Leaving readValidCreateNetworkData")
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
</script></con:config></con:testStep><con:testStep type="restrequest" name="createNetwork" id="5db0ded5-30c7-404c-b222-637a4d506e36">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="createNetwork" id="7c64c636-1e75-4332-a217-e87fbcc78487" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="9eaa3f2f-7af2-4f84-93e8-777c839f74d7" name="Valid HTTP Status Codes">
							<con:configuration><codes>201</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkDescription" value="${#TestCaset#networkDescription}"/>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="staticIPv4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
  <con:entry key="networkGateway" value="${#TestCase#networkGateway}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPv4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry><con:entry>networkStartingIp</con:entry><con:entry>networkEndingIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyCreateNetwork" id="a3172dfe-ab84-466f-9b1a-fb7137c695b2"><con:settings/><con:config><script>//
// This script will harvest the network ID obtained by calling the
// createNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("createNetwork").getPropertyValue("response")
def jsonSlurper = new JsonSlurper().parseText(rawResponse)
assert( jsonSlurper != "" )

testRunner.testCase.setPropertyValue("networkId", jsonSlurper.id.toString())
log.info(jsonSlurper)

</script></con:config></con:testStep><con:testStep type="restrequest" name="getNetwork" id="210dfbce-c0f3-40af-9c68-aa4f300611f8">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}/" methodName="NetworkId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="getNetwork" id="a32f3f9b-2a13-4b6c-a37a-60ccf69ee600" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.59.156/v1.0/api/networks/10/
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="bb845ccf-37b5-4e39-82f5-a54fca192931" name="Valid HTTP Status Codes">
							<con:configuration><codes>200</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#networkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>networkId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="GetIPv4RangeId" id="f3548f7a-d533-4ab5-9a79-04969bc76831"><con:settings/><con:config><script>//
// This script will harvest the first IPv4 Range ID obtained by calling the
// getNetwork test step.
//
// Access this network ID using: ${#TestCase#networkId} in the request field.
//
import groovy.json.JsonSlurper

def rawResponse = testRunner.testCase.getTestStepByName("getNetwork").getPropertyValue("response")
slurpResponse = new JsonSlurper().parseText(rawResponse)

log.info(slurpResponse.staticIpv4NetworkConfiguration.ipRange[0].id)
testRunner.testCase.setPropertyValue("RangeId", slurpResponse.staticIpv4NetworkConfiguration.ipRange[0].id.toString())
</script></con:config></con:testStep><con:testStep type="groovy" name="readUpdateNetworkData" id="23c09ad7-051d-4e18-9190-e2a7e3dcda4d"><con:settings/><con:config><script>//
// This script will alter the network identified by networkId using information
// from the file below.
//
// Access these variables using: ${#TestCase#&lt;variable name>} in the request body.
//

if(context.fileReader == null)
{
     log.info("## Creating fileReader")
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     String csvFilePath = groovyUtils.projectPath + "\\validUpdateNetwork.csv"
     context.fileReader = new BufferedReader(new FileReader(csvFilePath))
}

staticNetworkBody = '"static": '
testSetupLine = context.fileReader.readLine()
log.info(testSetupLine)
if(testSetupLine != null)
{
     log.info("Reading file, setting up variables")

     String[] propData = testSetupLine.split(",")
     
     testRunner.testCase.setPropertyValue("networkName", propData[0])
     testRunner.testCase.setPropertyValue("networkDescription", propData[1])
     testRunner.testCase.setPropertyValue("networkType", propData[2])
     testRunner.testCase.setPropertyValue("VLanId", propData[3])
     testRunner.testCase.setPropertyValue("staticIPv4Network", propData[4].toLowerCase())
  
     if("false" == propData[4].toLowerCase())
     {
//
// Generate the line "static": false
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase()
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
     }
     else
     {
//
// Generate the line "static": true,
//
     	staticNetworkBody = staticNetworkBody + propData[4].toLowerCase() + ",\n"
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )   
//
// Generate the line "staticIpv4NetworkConfiguration":
// Generate the line      {
//
          staticNetworkBody = staticNetworkBody + '     "staticIpv4NetworkConfiguration":\n' + '     {\n'
//
// Generate the line "          "gateway": "${#TestCase#networkGateway}",
//
          testRunner.testCase.setPropertyValue("networkGateway", propData[5])
         	staticNetworkBody = staticNetworkBody + '          "gateway": ' + '"' + propData[5] + '",\n'     
     	testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "subnet": "${#TestCase#networkSubnet}",
//
          testRunner.testCase.setPropertyValue("networkSubnet", propData[6])
          staticNetworkBody = staticNetworkBody + '          "subnet": ' + '"' + propData[6] + '",\n'          
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "dnsSuffix": "${#TestCase#networkDnsSuffix}",
//          
          testRunner.testCase.setPropertyValue("networkDnsSuffix", propData[7])
          staticNetworkBody = staticNetworkBody + '          "dnsSuffix": ' + '"' + propData[7] + '",\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "primaryDns": "${#TestCase#networkPrimaryDns}",
//
          testRunner.testCase.setPropertyValue("networkPrimaryDns", propData[8])
         	staticNetworkBody = staticNetworkBody + '          "primaryDns": ' + '"' + propData[8] + '",\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "          "secondaryDns": "${#TestCase#networkSecondaryDns}",
//

  //        assert(!(propData.size() % 2) &amp;&amp; (propData.size() = 10))

          if(propData.size() == 9)
          {
               testRunner.testCase.setPropertyValue("networkSecondaryDns", "")
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": \n'
          }
          else
          {
               testRunner.testCase.setPropertyValue("networkSecondaryDns", propData[9])
               staticNetworkBody = staticNetworkBody + '          "secondaryDns": ' + '"' + propData[9] + '"\n'
          }    
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
//
// Generate the line "     }"
//
          staticNetworkBody = staticNetworkBody + '     }\n'
          testRunner.testCase.setPropertyValue("staticNetworkBody", staticNetworkBody )
          log.info(staticNetworkBody)
     }
  
     log.info("Leaving readingValidUpdateNetworkData")
     windowsCmd = "cmd /c cd C:\\Program Files (x86)\\PuTTY &amp;"
     plinkCmd = "plink.exe" + " " + testRunner.testCase.testSuite.project.getPropertyValue("ApplianceIP") + " " + "-l root -pw linux"
     suspendCmd = "virsh suspend afc"
     command = windowsCmd + " " + plinkCmd + " " + suspendCmd

     result = command.execute().text
     log.info(result)
}

log.info("Shutting down fileReader")
context.fileReader.close()
context.fileReader = null
testRunner.gotoStepByName("loopEnd")
</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="0a07efbf-17b5-4d68-84bd-58e5fae80da6"><con:settings/><con:config><delay>15000</delay></con:config></con:testStep><con:testStep type="restrequest" name="updateNetwork" id="2542d213-ff96-4717-b2e8-e751b2365f8c">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="updateNetwork" id="7f3809ad-618a-4308-b62e-6bce71e3f162" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request>{
     "id": ${#TestCase#networkId},
     "name": "${#TestCase#networkName}",
     "description": "${#TestCase#networkDescription}",
     "type": "${#TestCase#networkType}",
     "vlanId": ${#TestCase#VLanId},
     ${#TestCase#staticNetworkBody}
}
</con:request>
						<con:originalUri>https://172.31.62.172/v1.0/api/networks/https%3A%2F%2F2
						</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="83c303bb-b7c6-4849-a3ae-de1df5691bce" name="Valid HTTP Status Codes">
							<con:configuration><codes>500
</codes></con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="networkType" value="${#TestCase#networkType}"/>
  <con:entry key="networkDescription" value="${#TestCase#networkDescription}"/>
  <con:entry key="networkDnsSuffix" value="${#TestCase#networkDnsSuffix}"/>
  <con:entry key="networkId" value="${#TestCase#NetworkId}"/>
  <con:entry key="networkSecondaryIp" value="${#TestCase#networkSecondaryIp}"/>
  <con:entry key="networkPrimaryIp" value="${#TestCase#networkPrimaryIp}"/>
  <con:entry key="networkSubnet" value="${#TestCase#networkSubnet}"/>
  <con:entry key="networkName" value="${#TestCase#networkName}"/>
  <con:entry key="staticIPV4Network" value="${#TestCase#staticIPv4Network}"/>
  <con:entry key="networkGateway" value="${#TestCase#networGateway}"/>
  <con:entry key="vLanId" value="${#TestCase#VLanId}"/>
</con:parameters>
					<con:parameterOrder><con:entry>networkId</con:entry><con:entry>networkName</con:entry><con:entry>networkDescription</con:entry><con:entry>networkType</con:entry><con:entry>vLanId</con:entry><con:entry>staticIPV4Network</con:entry><con:entry>networkGateway</con:entry><con:entry>networkSubnet</con:entry><con:entry>networkDnsSuffix</con:entry><con:entry>networkPrimaryIp</con:entry><con:entry>networkSecondaryIp</con:entry></con:parameterOrder></con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyOriginalAFCPopulation" id="c39a9950-7141-4a8a-bcdc-65ec4024fabf"><con:settings/><con:config><script>//
// This script will verify that the AFC has the basic info from
// a Create Network call.
//
// plink (part of the PuTTY package will be used to access the ICEE,
// then curl will be used to access the AFC VM.
//
// The network-type field returned will be mapped to the type provided
// during the Create/Update Network API.
//
windowsCmd = "cmd /c cd C:\\Program Files (x86)\\PuTTY &amp;"
plinkCmd = "plink.exe" + " " + testRunner.testCase.testSuite.project.getPropertyValue("ApplianceIP") + " " + "-l root -pw linux"
resumeCmd = "virsh resume afc"
command = windowsCmd + " " + plinkCmd + " " + resumeCmd

result = command.execute().text
log.info(result)

curlCmd = 'curl -H "Content-Type: application/json" -i -X GET http://admin:admin@100.66.1.21:8181/restconf/config/north-bound:fabrics/fabric/FABRIC1/network/'
curlCmd = curlCmd + testRunner.testCase.getPropertyValue("networkId")
command = windowsCmd + " " + plinkCmd + " " + curlCmd

result = command.execute().text
log.info(result)

assert result.contains("200 OK")
assert result.contains(testRunner.testCase.getPropertyValue("originalNetworkName"))
assert result.contains(testRunner.testCase.getPropertyValue("originalVLanId"))
assert result.contains(testRunner.testCase.getPropertyValue("networkId"))

switch(testRunner.testCase.getPropertyValue("originanNetworkType"))
{
case "PUBLIC_LAN":
case "PRIVATE_LAN":
case "OOB_OR_INFRASTRUCTURE_MANAGEMENT":
case "HYPERVISOR_MANAGEMENT":
case "HYPERVISOR_MIGRATION":
case "HYPERVISOR_CLUSTER_PRIVATE":
case "PXE":
case "FILESHARE":
case "HARDWARE_MANAGEMENT":
     assert result.contains("DATA_NETWORK")
     break
case "STORAGE_ISCSI_SAN":
case "STORAGE_FCOE_SAN":
     assert result.contains("STORAGE_NETWORK")
     break
case "FIP_SNOOPING":
     assert result.contains("PRIMISCUOUS_NETWORK")
     break
default:
     log.info("Unknown network type found")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteNetwork" id="6776d0ea-a434-4ac6-8b52-51faff21cf3c">
				<con:settings/>
				<con:config service="Networkconfigurations" resourcePath="/api/1.0/networks/{networkId}" methodName="Delete Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="deleteNetwork" id="76e35bc9-48a1-4666-967c-7a80e56e5754" mediaType="application/json" postQueryString="false">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="JSESSIONID" value="${#TestCase#JSessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting>
						</con:settings>
						<con:endpoint>https://${#Project#ApplianceIP}</con:endpoint>
						<con:request/>
						<con:originalUri>https://172.31.62.172/https%3A%2F%2F2</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" id="6298bcdc-4845-45f5-b708-82d0138f78b1" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>204</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="networkId" value="${#TestCase#NetworkId}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="verifyAFCDepopulation" id="4a8affee-53b9-46b8-b1ce-952188e50180"><con:settings/><con:config><script>//
// This script will verify that the AFC has the basic info from
// a Create Network call.
//
// plink (part of the PuTTY package will be used to access the ICEE,
// then curl will be used to access the AFC VM.
//
// The network-type field returned will be mapped to the type provided
// during the Create/Update Network API.
//

windowsCmd = "cmd /c cd C:\\Program Files (x86)\\PuTTY &amp;"

plinkCmd = "plink.exe" + " " + testRunner.testCase.testSuite.project.getPropertyValue("ApplianceIP") + " " + "-l root -pw linux"

curlCmd = 'curl -H "Content-Type: application/json" -i -X GET http://admin:admin@100.66.1.21:8181/restconf/config/north-bound:fabrics/fabric/FABRIC1/network/'
curlCmd = curlCmd + testRunner.testCase.getPropertyValue("networkId")
command = windowsCmd + " " + plinkCmd + " " + curlCmd

result = command.execute().text
log.info(result)

assert result.contains("404 Not Found")
assert !(result.contains("network-id"))
assert !(result.contains("network-name"))
assert !(result.contains("network-type"))
assert !(result.contains("network-vlan-id"))
</script></con:config></con:testStep><con:properties><con:property><con:name>JSessionId</con:name><con:value>aa66d80f-c5f4-476e-9a73-a4dc844690a5</con:value></con:property><con:property><con:name>networkId</con:name><con:value>77410</con:value></con:property><con:property><con:name>firstNetworkInfo</con:name><con:value>none</con:value></con:property><con:property><con:name>name</con:name><con:value>Network1</con:value></con:property><con:property><con:name>networkName</con:name><con:value>Network2</con:value></con:property><con:property><con:name>networkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>networkType</con:name><con:value>PRIVATE_LAN</con:value></con:property><con:property><con:name>networkVLanId</con:name><con:value>0</con:value></con:property><con:property><con:name>staticIPv4Network</con:name><con:value>true</con:value></con:property><con:property><con:name>networkGateway</con:name><con:value>100.100.0.1</con:value></con:property><con:property><con:name>networkSubnet</con:name><con:value>192.0.0.0</con:value></con:property><con:property><con:name>networkDnsSuffix</con:name><con:value>test.com</con:value></con:property><con:property><con:name>networkPrimaryIp</con:name><con:value>72.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryIp</con:name><con:value>72.162.0.2</con:value></con:property><con:property><con:name>VLanId</con:name><con:value>4000</con:value></con:property><con:property><con:name>networkStartingIp</con:name><con:value>72.162.0.90</con:value></con:property><con:property><con:name>networkEndingIp</con:name><con:value>72.162.0.92</con:value></con:property><con:property><con:name>staticNetworkBody</con:name><con:value>"static": true,
     "staticIpv4NetworkConfiguration":
     {
          "gateway": "100.100.0.1",
          "subnet": "192.0.0.0",
          "dnsSuffix": "test.com",
          "primaryDns": "100.162.0.1",
          "secondaryDns": "100.200.0.4"
     }
</con:value></con:property><con:property><con:name>networkPrimaryDns</con:name><con:value>100.162.0.1</con:value></con:property><con:property><con:name>networkSecondaryDns</con:name><con:value>100.200.0.4</con:value></con:property><con:property><con:name>RangeId</con:name><con:value>77411</con:value></con:property><con:property><con:name>originalNetworkName</con:name><con:value>Network1</con:value></con:property><con:property><con:name>originalNetworkType</con:name><con:value>PUBLIC_LAN</con:value></con:property><con:property><con:name>originalNetworkDescription</con:name><con:value>QA Network</con:value></con:property><con:property><con:name>originalVLanId</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:properties/>
	</con:testSuite>
	<con:properties>
		
		<con:property><con:name>ApplianceIP</con:name><con:value>100.68.123.170</con:value></con:property><con:property>
			<con:name>networkId</con:name>
			<con:value>1</con:value>
		</con:property>
		<con:property>
			<con:name>rangeId</con:name>
			<con:value>2</con:value>
		</con:property>
		<con:property>
			<con:name>offset</con:name>
			<con:value>0</con:value>
		</con:property>
		<con:property>
			<con:name>limit</con:name>
			<con:value>10</con:value>
		</con:property>
	<con:property><con:name>csvFileLocation</con:name><con:value>0</con:value></con:property><con:property><con:name>KeycloakIP</con:name><con:value>100.68.123.173</con:value></con:property><con:property><con:name>realm</con:name><con:value>smi-microservices</con:value></con:property><con:property><con:name>client</con:name><con:value>soapui-client</con:value></con:property><con:property><con:name>secret</con:name><con:value>f901342d-20ca-4888-8faf-ba3abdb31882</con:value></con:property><con:property><con:name>servicePort</con:name><con:value>46016</con:value></con:property><con:property><con:name>protocol</con:name><con:value>http</con:value></con:property><con:property><con:name>keycloakPort</con:name><con:value>8543</con:value></con:property><con:property><con:name>keycloakProtocol</con:name><con:value>https</con:value></con:property></con:properties>
	<con:wssContainer/>
	<con:oAuth2ProfileContainer><con:oAuth2Profile><con:name>Profile 1</con:name><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>AUTHORIZATION_CODE_GRANT</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod><con:manualAccessTokenExpirationTimeUnit>SECONDS</con:manualAccessTokenExpirationTimeUnit></con:oAuth2Profile><con:oAuth2Profile><con:name>Keycloak OAuth2</con:name><con:clientID>soapui-bearer</con:clientID><con:clientSecret>b9dd6e4c-6709-4fe6-bd0f-abebf11f4a09</con:clientSecret><con:authorizationURI>http://172.31.59.171:8081/auth</con:authorizationURI><con:accessTokenURI>http://172.31.59.171:8081/auth/realms/spring-demo/protocol/openid-connect/token</con:accessTokenURI><con:redirectURI>http://172.31.59.171:8081/auth</con:redirectURI><con:accessToken>eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI2N2RiMDU2YS1mMDA0LTRhMTgtYjA3Mi1iMzI4ZTU2MzdmMzkiLCJleHAiOjE0NjA1ODE5NzEsIm5iZiI6MCwiaWF0IjoxNDYwNTgxOTExLCJpc3MiOiJodHRwOi8vMTcyLjMxLjU5LjE3MTo4MDgxL2F1dGgvcmVhbG1zL3NwcmluZy1kZW1vIiwiYXVkIjoic29hcHVpLWJlYXJlciIsInN1YiI6ImU2MzA4YWU2LWZkODYtNGVlNi1iMWNiLWU2Y2QzZjMyY2Q1OCIsInR5cCI6IkJlYXJlciIsImF6cCI6InNvYXB1aS1iZWFyZXIiLCJzZXNzaW9uX3N0YXRlIjoiNGFjNTRmZmEtZjBjZS00MDkwLWI0MzItZjRhMzU1YWJkZmRiIiwiY2xpZW50X3Nlc3Npb24iOiJmMGMxZTk2YS03YjY3LTRlMjktYjEwYi01NmQwZjA5YjI0MjAiLCJhbGxvd2VkLW9yaWdpbnMiOltdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiUk9MRV9VU0VSIiwiUk9MRV9DT05GSUdVUkVfTkVUV09SSyIsIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXX0sInJlc291cmNlX2FjY2VzcyI6eyJzb2FwdWktYmVhcmVyIjp7InJvbGVzIjpbIlVTRVIiXX0sImN1c3RvbWVyLXBvcnRhbCI6eyJyb2xlcyI6WyJBRE1JTiIsIlVTRVIiXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJuYW1lIjoibWljaGFlbCBoZXBmZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJtaWNoYWVsX2hlcGZlciIsImdpdmVuX25hbWUiOiJtaWNoYWVsIiwiZmFtaWx5X25hbWUiOiJoZXBmZXIiLCJlbWFpbCI6Im1pY2hhZWxfaGVwZmVyQGRlbGwuY29tIn0.ZQ_zQ5MF7YCz9yAaZMwPm6RW1SeqGzpfs6GqZtFVK_-9p84327sKlCvUYn9wKL0BA9ZG35vszdRCmT1R89jN4jLclX6FTISyE5-O53rwjObu8ex3aqgx88XDgIfgBiGiIgOKnTSUaSIIXuYTjF7Aya6ONly7_5P5wham81NrDlo</con:accessToken><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>RESOURCE_OWNER_PASSWORD_CREDENTIALS</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod><con:refreshToken>eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI2MTBhODEyNy05YjJjLTRmYzItYTg5YS0zM2MzMmY4NWVkYTMiLCJleHAiOjE0NjA1ODM3MTEsIm5iZiI6MCwiaWF0IjoxNDYwNTgxOTExLCJpc3MiOiJodHRwOi8vMTcyLjMxLjU5LjE3MTo4MDgxL2F1dGgvcmVhbG1zL3NwcmluZy1kZW1vIiwic3ViIjoiZTYzMDhhZTYtZmQ4Ni00ZWU2LWIxY2ItZTZjZDNmMzJjZDU4IiwidHlwIjoiUmVmcmVzaCIsImF6cCI6InNvYXB1aS1iZWFyZXIiLCJzZXNzaW9uX3N0YXRlIjoiNGFjNTRmZmEtZjBjZS00MDkwLWI0MzItZjRhMzU1YWJkZmRiIiwiY2xpZW50X3Nlc3Npb24iOiJmMGMxZTk2YS03YjY3LTRlMjktYjEwYi01NmQwZjA5YjI0MjAiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiUk9MRV9VU0VSIiwiUk9MRV9DT05GSUdVUkVfTkVUV09SSyIsIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXX0sInJlc291cmNlX2FjY2VzcyI6eyJzb2FwdWktYmVhcmVyIjp7InJvbGVzIjpbIlVTRVIiXX0sImN1c3RvbWVyLXBvcnRhbCI6eyJyb2xlcyI6WyJBRE1JTiIsIlVTRVIiXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19fQ.EbBmXfP1NmZmJSbp4WdXTlIIY82IcgODf4cbjgh-YDnECTmCmeAs90KvOsMPYWcOW3E6pW9mzRvtMnaT8uFwlBWFLnUc5a3oBgn-jJp9Yhn8qMjd6FiD0D9GQ7hJwqKfO4b2BtJRYVcMsomTeXek0WXGBEqnFtuSMfuo3eqwWZY</con:refreshToken><con:scope/><con:accessTokenStatus xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:accessTokenStartingStatus>RETRIEVED_FROM_SERVER</con:accessTokenStartingStatus><con:accessTokenExpirationTime>60</con:accessTokenExpirationTime><con:accessTokenIssuedTime>1460581911</con:accessTokenIssuedTime><con:manualAccessTokenExpirationTime>60</con:manualAccessTokenExpirationTime><con:useManualAccessTokenExpirationTime>false</con:useManualAccessTokenExpirationTime><con:manualAccessTokenExpirationTimeUnit>SECONDS</con:manualAccessTokenExpirationTimeUnit><con:resourceOwnerName>michael_hepfer</con:resourceOwnerName><con:resourceOwnerPassword>1234</con:resourceOwnerPassword></con:oAuth2Profile></con:oAuth2ProfileContainer>
	<con:sensitiveInformation/>
</con:soapui-project>